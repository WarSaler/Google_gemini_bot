import os
import logging
import asyncio
import base64
import re
import tempfile
import subprocess
from datetime import datetime, timedelta
from collections import defaultdict, deque
from typing import Dict, List, Optional
from io import BytesIO
import aiohttp
from aiohttp import web
from newsapi import NewsApiClient
from bs4 import BeautifulSoup

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ!)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
try:
    from gtts import gTTS
    from pydub import AudioSegment
    import speech_recognition as sr
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Piper TTS (–Ω–æ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –∫–∞–∫ –º–æ–¥—É–ª—å)
    PIPER_AVAILABLE = False  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    
    VOICE_FEATURES_AVAILABLE = True
    logger.info("Voice features available")
except ImportError as e:
    VOICE_FEATURES_AVAILABLE = False
    PIPER_AVAILABLE = False
    logger.warning(f"Voice features not available: {e}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
AI_API_KEY = os.getenv('AI_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY')
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent'
PORT = int(os.getenv('PORT', 10000))

# –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
MINUTE_LIMIT = 10
DAILY_LIMIT = 250

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_sessions: Dict[int, deque] = defaultdict(lambda: deque(maxlen=50))
request_counts: Dict[int, Dict[str, List[datetime]]] = defaultdict(lambda: {'minute': [], 'day': []})
voice_settings: Dict[int, bool] = defaultdict(lambda: True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã
voice_engine_settings: Dict[int, str] = defaultdict(lambda: "gtts")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é gTTS

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è VOICE_FEATURES_AVAILABLE
VOICE_ENGINES = {}

def initialize_voice_engines():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤"""
    global VOICE_ENGINES
    VOICE_ENGINES = {
        "gtts": {
            "name": "Google TTS",
            "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å Google (–∂–µ–Ω—Å–∫–∏–π)",
            "available": VOICE_FEATURES_AVAILABLE
        },
        "gtts_slow": {
            "name": "Google TTS (–º–µ–¥–ª–µ–Ω–Ω—ã–π)",
            "description": "–ë–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å Google (–∂–µ–Ω—Å–∫–∏–π)",
            "available": VOICE_FEATURES_AVAILABLE
        },
        "piper_dmitri": {
            "name": "Piper TTS - –î–º–∏—Ç—Ä–∏–π",
            "description": "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å (–î–º–∏—Ç—Ä–∏–π)",
            "available": PIPER_AVAILABLE,
            "voice_model": "ru_RU-dmitri-medium"
        },
        "piper_ruslan": {
            "name": "Piper TTS - –†—É—Å–ª–∞–Ω", 
            "description": "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å (–†—É—Å–ª–∞–Ω)",
            "available": PIPER_AVAILABLE,
            "voice_model": "ru_RU-ruslan-medium"
        },
        "piper_irina": {
            "name": "Piper TTS - –ò—Ä–∏–Ω–∞",
            "description": "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å (–ò—Ä–∏–Ω–∞)",
            "available": PIPER_AVAILABLE,
            "voice_model": "ru_RU-irina-medium"
        },
        "piper_anna": {
            "name": "Piper TTS - –ê–Ω–Ω–∞",
            "description": "–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å (–ê–Ω–Ω–∞)",
            "available": PIPER_AVAILABLE,
            "voice_model": "ru_RU-anna-medium"
        }
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–∫–∏
initialize_voice_engines()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None

class GeminiBot:
    def __init__(self):
        self.news_client = NewsApiClient(api_key=NEWS_API_KEY) if NEWS_API_KEY else None
        logger.info(f"NewsAPI initialized: {'Yes' if self.news_client else 'No'}")
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini Bot!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ üí¨ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üñºÔ∏è –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ üåê –ü–æ–∏—Å–∫–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ö–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
/limits - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"""
        
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        user_id = update.effective_user.id
        voice_status = "–≤–∫–ª—é—á–µ–Ω—ã" if voice_settings[user_id] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        voice_features_status = "‚úÖ –¥–æ—Å—Ç—É–ø–Ω—ã" if VOICE_FEATURES_AVAILABLE else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        current_engine = voice_engine_settings[user_id]
        engine_info = VOICE_ENGINES.get(current_engine, VOICE_ENGINES["gtts"])
        
        help_message = f"""üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
/limits - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
/voice - –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
/voice_select - –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫

üîÑ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
‚Ä¢ üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
‚Ä¢ üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º
‚Ä¢ üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ üì∞ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

üéµ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {voice_features_status}
–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: {voice_status}
–¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å: {engine_info['name']}

‚ö° –õ–∏–º–∏—Ç—ã: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É, 250 –≤ –¥–µ–Ω—å"""
        
        await update.message.reply_text(help_message)
        
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear"""
        user_id = update.effective_user.id
        user_sessions[user_id].clear()
        await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
        
    async def limits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /limits"""
        user_id = update.effective_user.id
        remaining_minute, remaining_day = self.get_remaining_requests(user_id)
        
        limits_message = f"""üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:

üïê –í —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ: {remaining_minute}/{MINUTE_LIMIT}
üìÖ –°–µ–≥–æ–¥–Ω—è: {remaining_day}/{DAILY_LIMIT}"""
        
        await update.message.reply_text(limits_message)

    async def voice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /voice - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        user_id = update.effective_user.id
        voice_settings[user_id] = not voice_settings[user_id]
        
        if voice_settings[user_id]:
            current_engine = voice_engine_settings[user_id]
            engine_info = VOICE_ENGINES.get(current_engine, VOICE_ENGINES["gtts"])
            status_message = f"üéµ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã!\n\n–¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å: {engine_info['name']}\n{engine_info['description']}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /voice_select –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞."
        else:
            status_message = "üìù –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º."
            
        await update.message.reply_text(status_message)

    async def voice_select_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /voice_select - –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        user_id = update.effective_user.id
        current_engine = voice_engine_settings[user_id]
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤
        available_engines = []
        for engine_id, engine_info in VOICE_ENGINES.items():
            if engine_info["available"]:
                status = "‚úÖ (—Ç–µ–∫—É—â–∏–π)" if engine_id == current_engine else "‚ö°"
                available_engines.append(f"{status} {engine_info['name']}\n   {engine_info['description']}")
        
        if not available_engines:
            await update.message.reply_text("‚ùå –ì–æ–ª–æ—Å–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        
        message = "üé§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏:\n\n" + "\n\n".join(available_engines)
        message += "\n\nüìù –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        message += "/voice_gtts - Google TTS\n"
        message += "/voice_gtts_slow - Google TTS (–º–µ–¥–ª–µ–Ω–Ω—ã–π)\n"
        if PIPER_AVAILABLE:
            message += "/voice_dmitri - Piper TTS (–î–º–∏—Ç—Ä–∏–π, –º—É–∂—Å–∫–æ–π)\n"
            message += "/voice_ruslan - Piper TTS (–†—É—Å–ª–∞–Ω, –º—É–∂—Å–∫–æ–π)\n"
            message += "/voice_irina - Piper TTS (–ò—Ä–∏–Ω–∞, –∂–µ–Ω—Å–∫–∏–π)\n"
            message += "/voice_anna - Piper TTS (–ê–Ω–Ω–∞, –∂–µ–Ω—Å–∫–∏–π)"
        
        await update.message.reply_text(message)

    async def set_voice_engine_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, engine: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        user_id = update.effective_user.id
        
        if engine not in VOICE_ENGINES:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫.")
            return
        
        engine_info = VOICE_ENGINES[engine]
        if not engine_info["available"]:
            await update.message.reply_text(f"‚ùå {engine_info['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        voice_engine_settings[user_id] = engine
        await update.message.reply_text(
            f"‚úÖ –ì–æ–ª–æ—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {engine_info['name']}\n"
            f"üìù {engine_info['description']}\n\n"
            f"üéµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
        )

    def clean_text_for_speech(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
        # –£–¥–∞–ª—è–µ–º markdown —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = re.sub(r'\*(.*?)\*', r'\1', text)      # –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤
        text = re.sub(r'`(.*?)`', r'\1', text)        # –£–±–∏—Ä–∞–µ–º –∫–æ–¥
        text = re.sub(r'#{1,6}\s*', '', text)         # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏
        text = re.sub(r'[_~]', '', text)              # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        text = re.sub(r'[üé§üéµüìùüí¨üñºÔ∏èüì∞üí∞‚ö°‚ùå‚úÖüîçüí≠üìäüí°üîÑ]', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        return text

    def clean_old_requests(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        now = datetime.now()
        minute_ago = now - timedelta(minutes=1)
        day_ago = now - timedelta(days=1)
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã
        request_counts[user_id]['minute'] = [
            req_time for req_time in request_counts[user_id]['minute'] 
            if req_time > minute_ago
        ]
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ä—à–µ –¥–Ω—è
        request_counts[user_id]['day'] = [
            req_time for req_time in request_counts[user_id]['day'] 
            if req_time > day_ago
        ]

    def get_remaining_requests(self, user_id: int) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.clean_old_requests(user_id)
        
        minute_requests = len(request_counts[user_id]['minute'])
        day_requests = len(request_counts[user_id]['day'])
        
        remaining_minute = max(0, MINUTE_LIMIT - minute_requests)
        remaining_day = max(0, DAILY_LIMIT - day_requests)
        
        return remaining_minute, remaining_day

    def can_make_request(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
        remaining_minute, remaining_day = self.get_remaining_requests(user_id)
        return remaining_minute > 0 and remaining_day > 0

    def add_request(self, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫"""
        now = datetime.now()
        request_counts[user_id]['minute'].append(now)
        request_counts[user_id]['day'].append(now)

    async def call_gemini_api(self, messages: List[dict]) -> Optional[str]:
        """–í—ã–∑–æ–≤ Gemini API"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
            current_date = datetime.now().strftime("%d.%m.%Y")
            system_message = f"–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è {current_date} –≥–æ–¥. –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ª—é–¥–µ–π –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –¥–∞—Ç—É."
            
            headers = {
                'Content-Type': 'application/json',
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            all_messages = [{"role": "system", "content": system_message}] + messages
            
            data = {
                "contents": [
                    {
                        "parts": [
                            {"text": msg["content"]} for msg in all_messages
                        ]
                    }
                ]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{GEMINI_API_URL}?key={AI_API_KEY}",
                    headers=headers,
                    json=data,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if 'candidates' in result and len(result['candidates']) > 0:
                            return result['candidates'][0]['content']['parts'][0]['text']
                    else:
                        logger.error(f"Gemini API error: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"Error calling Gemini API: {e}")
            return None

    async def speech_to_text(self, audio_bytes: bytes) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"""
        if not VOICE_FEATURES_AVAILABLE:
            return None
            
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as ogg_file:
                ogg_file.write(audio_bytes)
                ogg_path = ogg_file.name
            
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as wav_file:
                wav_path = wav_file.name
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ WAV —Å –ø–æ–º–æ—â—å—é pydub
                logger.debug("Converting OGG to WAV...")
                audio = AudioSegment.from_ogg(ogg_path)
                audio = audio.set_frame_rate(16000).set_channels(1)  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                audio.export(wav_path, format="wav")
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                logger.debug("Recognizing speech...")
                recognizer = sr.Recognizer()
                
                with sr.AudioFile(wav_path) as source:
                    audio_data = recognizer.record(source)
                
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ä—É—Å—Å–∫–∏–π, –ø–æ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                try:
                    text = recognizer.recognize_google(audio_data, language="ru-RU")
                    logger.info(f"Speech recognized (Russian): {len(text)} characters")
                    return text
                except sr.UnknownValueError:
                    # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                    try:
                        text = recognizer.recognize_google(audio_data, language="en-US")
                        logger.info(f"Speech recognized (English): {len(text)} characters")
                        return text
                    except sr.UnknownValueError:
                        logger.warning("Could not understand audio in both Russian and English")
                        return None
                        
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                try:
                    os.unlink(ogg_path)
                    os.unlink(wav_path)
                except:
                    pass
                    
        except Exception as e:
            logger.error(f"Error in speech recognition: {e}")
            return None

    async def text_to_speech(self, text: str, user_id: int, language: str = "ru") -> Optional[bytes]:
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤"""
        if not VOICE_FEATURES_AVAILABLE:
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            if not text or len(text.strip()) < 3:
                logger.warning("Text too short for TTS")
                return None
                
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
            if len(text) > 1000:
                text = text[:1000] + "..."
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–≤–∏–∂–æ–∫
            engine = voice_engine_settings.get(user_id, "gtts")
            logger.debug(f"Converting text to speech with {engine}: {len(text)} characters")
            
            if engine == "gtts":
                return await self._gtts_synthesize(text, language, slow=False)
            elif engine == "gtts_slow":
                return await self._gtts_synthesize(text, language, slow=True)
            elif engine.startswith("piper_") and PIPER_AVAILABLE:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–≤–∏–∂–∫–∞
                engine_info = VOICE_ENGINES.get(engine)
                if engine_info and "voice_model" in engine_info:
                    voice_model = engine_info["voice_model"]
                    return await self._piper_synthesize(text, voice_model)
                else:
                    # Fallback –∫ –î–º–∏—Ç—Ä–∏—é –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                    return await self._piper_synthesize(text, "ru_RU-dmitri-medium")
            else:
                # Fallback –∫ gTTS
                logger.warning(f"Engine {engine} not available, falling back to gTTS")
                return await self._gtts_synthesize(text, language, slow=False)
                    
        except Exception as e:
            logger.error(f"Error in text-to-speech: {e}")
            return None

    async def _gtts_synthesize(self, text: str, language: str, slow: bool = False) -> Optional[bytes]:
        """–°–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é Google TTS"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                temp_path = temp_file.name
            
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ TTS –æ–±—ä–µ–∫—Ç–∞
                tts = gTTS(text=text, lang=language, slow=slow)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                tts.save(temp_path)
                
                # –ß—Ç–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
                with open(temp_path, 'rb') as audio_file:
                    audio_bytes = audio_file.read()
                
                logger.info(f"gTTS synthesis success: generated {len(audio_bytes)} bytes")
                return audio_bytes
                
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                try:
                    os.unlink(temp_path)
                except:
                    pass
        except Exception as e:
            logger.error(f"Error in gTTS synthesis: {e}")
            return None

    async def _piper_synthesize(self, text: str, voice_model: str = "ru_RU-dmitri-medium") -> Optional[bytes]:
        """–°–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é Piper TTS (pip version)"""
        try:
            import tempfile
            import os
            import wave
            from piper.voice import PiperVoice
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –≥–æ–ª–æ—Å–∞
            if not voice_model:
                voice_model = "ru_RU-dmitri-medium"
            
            model_path = f"/app/piper_tts/voices/{voice_model}.onnx"
            config_path = f"/app/piper_tts/voices/{voice_model}.onnx.json"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
            if not os.path.exists(model_path) or not os.path.exists(config_path):
                logger.warning(f"Voice model {voice_model} not found, using fallback")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
                voices_dir = "/app/piper_tts/voices"
                if os.path.exists(voices_dir):
                    onnx_files = [f for f in os.listdir(voices_dir) if f.endswith('.onnx')]
                    if onnx_files:
                        fallback_model = onnx_files[0].replace('.onnx', '')
                        model_path = f"{voices_dir}/{fallback_model}.onnx"
                        config_path = f"{voices_dir}/{fallback_model}.onnx.json"
                        logger.info(f"Using fallback model: {fallback_model}")
                    else:
                        raise Exception("No voice models found")
                else:
                    raise Exception("Voices directory not found")
            
            logger.info(f"Loading Piper voice model: {model_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –º–æ–¥–µ–ª—å
            voice = PiperVoice.load(model_path, config_path)
            logger.info(f"Voice loaded successfully, sample rate: {voice.config.sample_rate}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                temp_path = temp_file.name
            
            logger.info(f"Temporary file created: {temp_path}")
            
            try:
                # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API
                logger.info(f"Starting synthesis for text: {text[:50]}...")
                
                # –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                audio_data = b""
                for audio_chunk in voice.synthesize_stream(text):
                    audio_data += audio_chunk
                
                if not audio_data:
                    raise Exception("No audio data generated")
                
                logger.info(f"Generated raw audio data: {len(audio_data)} bytes")
                
                # –°–æ–∑–¥–∞–µ–º WAV —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                with wave.open(temp_path, 'wb') as wav_file:
                    wav_file.setnchannels(1)  # –º–æ–Ω–æ
                    wav_file.setsampwidth(2)   # 16-bit
                    wav_file.setframerate(voice.config.sample_rate)
                    wav_file.writeframes(audio_data)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                if not os.path.exists(temp_path):
                    raise Exception("Output file was not created")
                
                file_size = os.path.getsize(temp_path)
                if file_size == 0:
                    raise Exception("Output file is empty")
                
                logger.info(f"Output WAV file size: {file_size} bytes")
                
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
                with open(temp_path, 'rb') as audio_file:
                    wav_bytes = audio_file.read()
                
                logger.info(f"Piper TTS synthesis success: generated {len(wav_bytes)} bytes")
                return wav_bytes
                
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                try:
                    if os.path.exists(temp_path):
                        os.unlink(temp_path)
                        logger.debug(f"Cleaned up temporary file: {temp_path}")
                except Exception as cleanup_error:
                    logger.warning(f"Failed to cleanup temporary file: {cleanup_error}")
            
        except Exception as e:
            logger.error(f"Piper TTS synthesis error: {e}")
            logger.exception("Full traceback:")
            return None

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        user_message = update.message.text
        user_id = update.message.from_user.id
        
        logger.info(f"Message from user {user_id}: {user_message[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if not self.can_make_request(user_id):
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                f"üïê –û—Å—Ç–∞–ª–æ—Å—å –≤ –º–∏–Ω—É—Ç–µ: {remaining_minute}\n"
                f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_day}"
            )
            return
            
        self.add_request(user_id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.needs_current_data(user_message):
                response = await self.get_current_data(user_message)
            else:
                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini
                user_sessions[user_id].append({"role": "user", "content": user_message})
                messages = list(user_sessions[user_id])
                response = await self.call_gemini_api(messages)
                
                if response:
                    user_sessions[user_id].append({"role": "assistant", "content": response})
                else:
                    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self.safe_send_message(update, response)
            
        except Exception as e:
            logger.error(f"Error in handle_message: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    def needs_current_data(self, query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω—ã –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        keywords = [
            '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '–∞–∫—Ç—É–∞–ª—å–Ω', '—Å–≤–µ–∂', '–ø–æ—Å–ª–µ–¥–Ω',
            '–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–æ–≥–æ–¥–∞', '—Ç–µ–∫—É—â', '–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫',
            '—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '–≤–æ–∑—Ä–∞—Å—Ç', '–ª–µ—Ç', '–≥–æ–¥—ã', '–≥–æ–¥–∞'
        ]
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in keywords)

    async def get_current_data(self, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            if any(word in query.lower() for word in ['–Ω–æ–≤–æ—Å—Ç–∏', '–Ω–æ–≤–æ—Å—Ç—å', '–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫']):
                return await self.search_news(query)
            elif any(word in query.lower() for word in ['–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                return await self.search_currency_rates(query)
            elif any(word in query.lower() for word in ['–ø–æ–≥–æ–¥–∞']):
                return await self.search_weather_data(query)
            elif any(word in query.lower() for word in ['—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '–≤–æ–∑—Ä–∞—Å—Ç', '–ª–µ—Ç']):
                return await self.handle_age_query(query)
            else:
                # –û–±—â–∏–π –ø–æ–∏—Å–∫
                return await self.search_duckduckgo(query)
                
        except Exception as e:
            logger.error(f"Error getting current data: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."

    async def search_news(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            if self.news_client:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                numbers = re.findall(r'\d+', query)
                count = int(numbers[0]) if numbers else 10
                count = min(count, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 –Ω–æ–≤–æ—Å—Ç–µ–π
                
                articles = self.news_client.get_everything(
                    q='—Ä–æ—Å—Å–∏—è OR –ø–æ–ª–∏—Ç–∏–∫–∞ OR –ø—É—Ç–∏–Ω OR –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                    language='ru',
                    sort_by='publishedAt',
                    page_size=count
                )
                
                if articles['articles']:
                    news_list = []
                    for i, article in enumerate(articles['articles'][:count], 1):
                        title = article['title']
                        description = article.get('description', '')
                        url = article['url']
                        
                        news_item = f"{i}. {title}"
                        if description:
                            news_item += f"\n{description[:100]}..."
                        news_item += f"\nüîó {url}\n"
                        
                        news_list.append(news_item)
                    
                    return f"üì∞ –ü–û–°–õ–ï–î–ù–ò–ï –ù–û–í–û–°–¢–ò ({count} —à—Ç.):\n\n" + "\n".join(news_list)
            
            # Fallback –∫ –ø–æ–∏—Å–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            return await self.search_duckduckgo(query)
            
        except Exception as e:
            logger.error(f"News search error: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏."

    async def search_duckduckgo(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ DuckDuckGo"""
        try:
            from urllib.parse import quote
            search_query = quote(query)
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://html.duckduckgo.com/html/?q={search_query}",
                    headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'},
                    timeout=15
                ) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        results = []
                        for result in soup.find_all('div', {'class': 'result__body'})[:5]:
                            title_elem = result.find('a', {'class': 'result__a'})
                            snippet_elem = result.find('a', {'class': 'result__snippet'})
                            
                            if title_elem and snippet_elem:
                                title = title_elem.get_text().strip()
                                snippet = snippet_elem.get_text().strip()
                                url = title_elem.get('href', '')
                                
                                results.append(f"‚Ä¢ {title}\n{snippet}\nüîó {url}\n")
                        
                        if results:
                            return f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:\n\n" + "\n".join(results)
                        
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            
        except Exception as e:
            logger.error(f"DuckDuckGo search error: {e}")
            return "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞."

    async def search_currency_rates(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://www.cbr-xml-daily.ru/daily_json.js",
                    timeout=10
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        usd = data['Valute']['USD']['Value']
                        eur = data['Valute']['EUR']['Value']
                        
                        return f"üí∞ –ö–£–†–°–´ –í–ê–õ–Æ–¢ (–¶–ë –†–§):\n\nüíµ USD: {usd:.2f} ‚ÇΩ\nüí∂ EUR: {eur:.2f} ‚ÇΩ"
                        
        except Exception as e:
            logger.error(f"Currency search error: {e}")
            
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç."

    async def search_weather_data(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã"""
        return await self.search_duckduckgo(f"–ø–æ–≥–æ–¥–∞ {query}")

    async def handle_age_query(self, query: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π"""
        try:
            current_date = datetime.now().strftime("%d.%m.%Y")
            current_year = datetime.now().year
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
            age_prompt = f"""–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –°–µ–≥–æ–¥–Ω—è {current_date} ({current_year} –≥–æ–¥).
            
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {query}

–ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–∏–π {current_year} –≥–æ–¥. 
–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ä–æ–¥–∏–ª—Å—è –≤ 1971 –≥–æ–¥—É, —Ç–æ –≤ {current_year} –≥–æ–¥—É –µ–º—É {current_year - 1971} –ª–µ—Ç.

–û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ, —É–∫–∞–∑—ã–≤–∞—è —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ {current_year} –≥–æ–¥."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
            messages = [{"role": "user", "content": age_prompt}]
            response = await self.call_gemini_api(messages)
            
            if response:
                return response
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç."
                
        except Exception as e:
            logger.error(f"Age query error: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ."

    async def safe_send_message(self, update: Update, response: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if len(response) > 4096:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for i in range(0, len(response), 4096):
                    await update.message.reply_text(response[i:i+4096])
            else:
                await update.message.reply_text(response)
                
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        user_id = update.message.from_user.id
        
        if not self.can_make_request(user_id):
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                f"üïê –û—Å—Ç–∞–ª–æ—Å—å –≤ –º–∏–Ω—É—Ç–µ: {remaining_minute}\n"
                f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_day}"
            )
            return
            
        self.add_request(user_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(file.file_path) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        
                        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                        image_base64 = base64.b64encode(image_data).decode('utf-8')
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
                        headers = {'Content-Type': 'application/json'}
                        data = {
                            "contents": [
                                {
                                    "parts": [
                                        {"text": "–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ."},
                                        {
                                            "inline_data": {
                                                "mime_type": "image/jpeg",
                                                "data": image_base64
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                        
                        async with session.post(
                            f"{GEMINI_API_URL}?key={AI_API_KEY}",
                            headers=headers,
                            json=data,
                            timeout=30
                        ) as api_response:
                            if api_response.status == 200:
                                result = await api_response.json()
                                if 'candidates' in result and len(result['candidates']) > 0:
                                    response = result['candidates'][0]['content']['parts'][0]['text']
                                    await self.safe_send_message(update, response)
                                else:
                                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                            else:
                                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    else:
                        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                        
        except Exception as e:
            logger.error(f"Error processing photo: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        logger.info(f"Received voice message from user {user_id}")
        
        if not VOICE_FEATURES_AVAILABLE:
            await update.message.reply_text(
                "üé§ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
                "–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
            )
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if not self.can_make_request(user_id):
                remaining_minute, remaining_day = self.get_remaining_requests(user_id)
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è."
                )
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            logger.info(f"Sent typing indicator for voice processing from user {user_id}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            voice_file = await update.message.voice.get_file()
            voice_bytes = await voice_file.download_as_bytearray()
            
            logger.info(f"Downloaded voice message: {len(voice_bytes)} bytes")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            await update.message.reply_text("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
            transcribed_text = await self.speech_to_text(bytes(voice_bytes))
            
            if not transcribed_text:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç—á–µ.")
                return
            
            logger.info(f"Voice transcribed for user {user_id}: {transcribed_text[:100]}...")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Ä–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
            await update.message.reply_text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{transcribed_text}\"")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.needs_current_data(transcribed_text):
                await update.message.reply_text("üîç –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
                current_info = await self.get_current_data(transcribed_text)
                
                if current_info:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    enhanced_message = f"""–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')} –≥–æ–¥.

–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {transcribed_text}

–ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:
{current_info}

–ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
                    
                    messages = [{"role": "user", "content": enhanced_message}]
                else:
                    messages = [{"role": "user", "content": transcribed_text}]
            else:
                messages = [{"role": "user", "content": transcribed_text}]

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await update.message.reply_text("üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
            
            logger.info(f"Calling Gemini API for voice message from user {user_id}")
            response = await self.call_gemini_api(messages)
            
            if response:
                logger.info(f"Received response from Gemini API for voice message from user {user_id}: {len(response)} characters")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫
                self.add_request(user_id)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
                remaining_minute, remaining_day = self.get_remaining_requests(user_id)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if voice_settings[user_id]:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    await update.message.reply_text("üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...")
                    
                    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                    clean_response = self.clean_text_for_speech(response)
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è TTS (—Ä—É—Å—Å–∫–∏–π –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –∏–Ω–∞—á–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
                    tts_language = "ru" if any('\u0400' <= char <= '\u04FF' for char in clean_response) else "en"
                    
                    # –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
                    voice_bytes = await self.text_to_speech(clean_response, user_id, tts_language)
                    
                    if voice_bytes:
                        try:
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            await update.message.reply_voice(
                                voice=BytesIO(voice_bytes),
                                caption=f"üé§‚û°Ô∏èüéµ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ –º–∏–Ω—É—Ç—É, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è\n\nüí° –û—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: /voice"
                            )
                            logger.info(f"Successfully sent voice response to user {user_id}")
                        except Exception as e:
                            logger.error(f"Failed to send voice message to user {user_id}: {e}")
                            # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ—Ç–≤–µ—Ç—É
                            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç, –≤–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{response}")
                    else:
                        logger.error(f"Voice synthesis failed for user {user_id}")
                        # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ—Ç–≤–µ—Ç—É
                        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç, –≤–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{response}")
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã
                    await update.message.reply_text(f"üìù {response}\n\nüí° –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: /voice")
            else:
                logger.error(f"No response received from Gemini API for voice message from user {user_id}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        except Exception as e:
            logger.error(f"Error handling voice message from user {user_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception: {context.error}")
    if update and hasattr(update, 'message') and update.message:
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

# HTTP —Å–µ—Ä–≤–µ—Ä –∏ webhook
async def health_check(request):
    """Health check endpoint"""
    return web.Response(text="Bot is running! Status: Active")

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    try:
        logger.info(f"Webhook received: {request.method} {request.path}")
        data = await request.json()
        logger.info(f"Webhook data keys: {list(data.keys())}")
        
        if not telegram_app:
            logger.error("telegram_app is None!")
            return web.Response(status=500, text="Bot not initialized")
            
        update = Update.de_json(data, telegram_app.bot)
        logger.info(f"Update processed: {update.update_id if update else 'None'}")
        
        await telegram_app.process_update(update)
        return web.Response(status=200, text="OK")
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return web.Response(status=500, text=f"Error: {str(e)}")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–± —Å–µ—Ä–≤–µ—Ä–∞"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_post('/webhook', webhook_handler)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"Web server started on port {PORT}")
    logger.info(f"Routes: {[route.resource.canonical for route in app.router.routes()]}")

def setup_piper_if_needed():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Piper TTS –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    global PIPER_AVAILABLE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å piper —á–µ—Ä–µ–∑ pip
    piper_installed = False
    try:
        import piper.voice
        logger.info("Piper TTS already available")
        piper_installed = True
        PIPER_AVAILABLE = True
    except ImportError:
        logger.info("Piper TTS not found, will install...")
        PIPER_AVAILABLE = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    voices_dir = "/app/piper_tts/voices"
    models_exist = False
    
    if os.path.exists(voices_dir):
        onnx_files = [f for f in os.listdir(voices_dir) if f.endswith('.onnx')]
        if len(onnx_files) >= 4:  # –û–∂–∏–¥–∞–µ–º 4 –≥–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
            models_exist = True
            logger.info(f"Found {len(onnx_files)} voice models")
        else:
            logger.info(f"Found only {len(onnx_files)} voice models, need to download more")
    else:
        logger.info("Voices directory not found, will create and download models")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Piper –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª–∏
    if not piper_installed or not models_exist:
        logger.info("Running Piper TTS installation script...")
        result = subprocess.run(['bash', 'install_piper.sh'], 
                              capture_output=True, text=True, cwd='/app')
        
        if result.returncode == 0:
            logger.info("Piper TTS installation script completed successfully")
            logger.info(f"Installation stdout: {result.stdout}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Piper –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not piper_installed:
                try:
                    import piper.voice
                    PIPER_AVAILABLE = True
                    logger.info("Piper TTS installed and imported successfully")
                except ImportError:
                    logger.error("Piper TTS import failed after installation")
                    PIPER_AVAILABLE = False
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
            if os.path.exists(voices_dir):
                onnx_files = [f for f in os.listdir(voices_dir) if f.endswith('.onnx')]
                logger.info(f"Voice models after installation: {len(onnx_files)} found")
                if len(onnx_files) > 0:
                    logger.info(f"Available models: {onnx_files}")
                    return True
                else:
                    logger.warning("No voice models found after installation")
                    return False
            else:
                logger.error("Voices directory still not found after installation")
                return False
        else:
            logger.error(f"Piper TTS installation failed: {result.stderr}")
            logger.error(f"Installation stdout: {result.stdout}")
            PIPER_AVAILABLE = False
            return False
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global telegram_app
    
    logger.info("Starting Gemini Telegram Bot...")
    logger.info(f"TELEGRAM_TOKEN: {'‚úì' if TELEGRAM_TOKEN else '‚úó'}")
    logger.info(f"AI_API_KEY: {'‚úì' if AI_API_KEY else '‚úó'}")
    logger.info(f"NEWS_API_KEY: {'‚úì' if NEWS_API_KEY else '‚úó'}")
    logger.info(f"PORT: {PORT}")
    logger.info(f"RENDER environment: {'‚úì' if os.environ.get('RENDER') else '‚úó'}")
    
    if not TELEGRAM_TOKEN or not AI_API_KEY:
        logger.error("Missing required environment variables")
        return
        
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Piper TTS –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if os.environ.get('RENDER'):
        if setup_piper_if_needed():
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–∫–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Piper
            initialize_voice_engines()
            logger.info("Voice engines reinitialized after Piper setup")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
    bot = GeminiBot()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    telegram_app.add_handler(CommandHandler("start", bot.start_command))
    telegram_app.add_handler(CommandHandler("help", bot.help_command))
    telegram_app.add_handler(CommandHandler("clear", bot.clear_command))
    telegram_app.add_handler(CommandHandler("limits", bot.limits_command))
    telegram_app.add_handler(CommandHandler("voice", bot.voice_command))
    telegram_app.add_handler(CommandHandler("voice_select", bot.voice_select_command))
    telegram_app.add_handler(CommandHandler("voice_gtts", lambda u, c: bot.set_voice_engine_command(u, c, "gtts")))
    telegram_app.add_handler(CommandHandler("voice_gtts_slow", lambda u, c: bot.set_voice_engine_command(u, c, "gtts_slow")))
    telegram_app.add_handler(CommandHandler("voice_dmitri", lambda u, c: bot.set_voice_engine_command(u, c, "piper_dmitri")))
    telegram_app.add_handler(CommandHandler("voice_ruslan", lambda u, c: bot.set_voice_engine_command(u, c, "piper_ruslan")))
    telegram_app.add_handler(CommandHandler("voice_irina", lambda u, c: bot.set_voice_engine_command(u, c, "piper_irina")))
    telegram_app.add_handler(CommandHandler("voice_anna", lambda u, c: bot.set_voice_engine_command(u, c, "piper_anna")))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    telegram_app.add_handler(MessageHandler(filters.PHOTO, bot.handle_photo))
    telegram_app.add_handler(MessageHandler(filters.VOICE, bot.handle_voice))
    telegram_app.add_error_handler(error_handler)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    is_production = os.environ.get('RENDER') is not None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await telegram_app.initialize()
    await telegram_app.start()
    
    # –û—á–∏—Å—Ç–∫–∞ webhook
    try:
        await telegram_app.bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"Error clearing webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–± —Å–µ—Ä–≤–µ—Ä–∞
    await start_web_server()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if is_production:
        # Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        webhook_url = "https://google-gemini-bot.onrender.com/webhook"
        logger.info(f"Setting webhook to {webhook_url}")
        
        try:
            await telegram_app.bot.set_webhook(url=webhook_url)
            logger.info("Webhook set successfully")
            
        except Exception as e:
            logger.error(f"Webhook error: {e}")
            # Fallback –∫ –ø–æ–ª–ª–∏–Ω–≥—É
            await telegram_app.updater.start_polling(drop_pending_updates=True)
            logger.info("Fallback to polling")
    else:
        # –ü–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("Starting polling mode")
        await telegram_app.updater.start_polling(drop_pending_updates=True)
        logger.info("Polling started")
    
    # –û–∂–∏–¥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    await asyncio.Event().wait()

if __name__ == '__main__':
    asyncio.run(main()) 