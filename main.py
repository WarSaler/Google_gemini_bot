import os
import logging
import asyncio
import base64
import re
import tempfile
import subprocess
from datetime import datetime, timedelta
from collections import defaultdict, deque
from typing import Dict, List, Optional
from io import BytesIO
import aiohttp
from aiohttp import web
from newsapi import NewsApiClient
from bs4 import BeautifulSoup

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ!)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
try:
    from gtts import gTTS
    import tempfile
    import speech_recognition as sr
    from pydub import AudioSegment
    
    VOICE_FEATURES_AVAILABLE = True
    logger.info("Voice features available")
except ImportError as e:
    VOICE_FEATURES_AVAILABLE = False
    logger.warning(f"Voice features not available: {e}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
AI_API_KEY = os.getenv('AI_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY')
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent'
PORT = int(os.getenv('PORT', 10000))

# –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
MINUTE_LIMIT = 10
DAILY_LIMIT = 250

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_sessions: Dict[int, deque] = defaultdict(lambda: deque(maxlen=50))
request_counts: Dict[int, Dict[str, List[datetime]]] = defaultdict(lambda: {'minute': [], 'day': []})
voice_settings: Dict[int, bool] = defaultdict(lambda: True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã

# –ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ initialize_voice_engines()
voice_engine_settings: Dict[int, str] = defaultdict(str)  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ
VOICE_ENGINES: Dict[str, dict] = {}  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ initialize_voice_engines()
DEFAULT_VOICE_ENGINE = "azure_dmitri"  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ initialize_voice_engines()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
user_service_messages: Dict[int, List[int]] = defaultdict(list)  # user_id -> [message_id, ...]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
processed_messages: Dict[str, bool] = {}  # message_id -> processed

def initialize_voice_engines():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤"""
    global VOICE_ENGINES
    VOICE_ENGINES = {
        "gtts": {
            "name": "Google TTS",
            "description": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å Google",
            "available": VOICE_FEATURES_AVAILABLE
        },
        # Azure Speech Services - –º—É–∂—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
        "azure_dmitri": {
            "name": "Azure Speech - –î–º–∏—Ç—Ä–∏–π",
            "description": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞",
            "available": VOICE_FEATURES_AVAILABLE,
            "azure_voice": "ru-RU-DmitryNeural"
        },
        "azure_artem": {
            "name": "Azure Speech - –ê—Ä—Ç—ë–º",
            "description": "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å",
            "available": VOICE_FEATURES_AVAILABLE,
            "azure_voice": "ru-RU-ArtemNeural"
        },
        # Azure Speech Services - –∂–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞  
        "azure_svetlana": {
            "name": "Azure Speech - –°–≤–µ—Ç–ª–∞–Ω–∞",
            "description": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞",
            "available": VOICE_FEATURES_AVAILABLE,
            "azure_voice": "ru-RU-SvetlanaNeural"
        },
        "azure_darya": {
            "name": "Azure Speech - –î–∞—Ä—å—è",
            "description": "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å",
            "available": VOICE_FEATURES_AVAILABLE,
            "azure_voice": "ru-RU-DaryaNeural"
        },
        "azure_polina": {
            "name": "Azure Speech - –ü–æ–ª–∏–Ω–∞",
            "description": "–ú—è–≥–∫–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å",
            "available": VOICE_FEATURES_AVAILABLE,
            "azure_voice": "ru-RU-PolinaNeural"
        }
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    global voice_engine_settings, DEFAULT_VOICE_ENGINE
    default_engine = "azure_dmitri"  # Azure –î–º–∏—Ç—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DEFAULT_VOICE_ENGINE = default_engine
    voice_engine_settings = defaultdict(lambda: default_engine)
    
    logger.info(f"Voice engines initialized.")
    logger.info(f"Default voice engine: {default_engine}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–≤–∏–∂–∫–∏
    available_engines = [engine_id for engine_id, info in VOICE_ENGINES.items() if info["available"]]
    logger.info(f"Available voice engines: {available_engines}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None

class GeminiBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NewsAPI –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å
        self.news_client = NewsApiClient(api_key=NEWS_API_KEY) if NEWS_API_KEY else None
        logger.info(f"NewsAPI initialized: {'Yes' if self.news_client else 'No (missing API key)'}")
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini Bot!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ üí¨ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üñºÔ∏è –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ üåê –ü–æ–∏—Å–∫–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ö–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
/limits - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"""
        
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        user_id = update.effective_user.id
        voice_status = "–≤–∫–ª—é—á–µ–Ω—ã" if voice_settings[user_id] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        voice_features_status = "‚úÖ –¥–æ—Å—Ç—É–ø–Ω—ã" if VOICE_FEATURES_AVAILABLE else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        current_engine = voice_engine_settings[user_id]
        engine_info = VOICE_ENGINES.get(current_engine, VOICE_ENGINES["gtts"])
        
        help_message = f"""üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
/limits - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
/voice - –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
/voice_select - –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫

üîÑ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
‚Ä¢ üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
‚Ä¢ üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏ –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º
‚Ä¢ üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ üì∞ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

üéµ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {voice_features_status}
–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: {voice_status}
–¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å: {engine_info['name']}

‚ö° –õ–∏–º–∏—Ç—ã: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É, 250 –≤ –¥–µ–Ω—å"""
        
        await update.message.reply_text(help_message)
        
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear"""
        user_id = update.effective_user.id
        user_sessions[user_id].clear()
        await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
        
    async def limits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /limits"""
        user_id = update.effective_user.id
        remaining_minute, remaining_day = self.get_remaining_requests(user_id)
        
        limits_message = f"""üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:

üïê –í —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ: {remaining_minute}/{MINUTE_LIMIT}
üìÖ –°–µ–≥–æ–¥–Ω—è: {remaining_day}/{DAILY_LIMIT}"""
        
        await update.message.reply_text(limits_message)

    async def voice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /voice - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        user_id = update.effective_user.id
        voice_settings[user_id] = not voice_settings[user_id]
        
        if voice_settings[user_id]:
            current_engine = voice_engine_settings[user_id]
            engine_info = VOICE_ENGINES.get(current_engine, VOICE_ENGINES["gtts"])
            status_message = f"üéµ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã!\n\n–¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å: {engine_info['name']}\n{engine_info['description']}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /voice_select –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞."
        else:
            status_message = "üìù –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º."
            
        await update.message.reply_text(status_message)

    async def voice_select_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        user_id = update.effective_user.id
        
        # –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
        current_engine = voice_engine_settings.get(user_id, DEFAULT_VOICE_ENGINE)
        current_name = VOICE_ENGINES.get(current_engine, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Azure
        azure_api_key = os.getenv('AZURE_SPEECH_KEY')
        azure_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if azure_api_key else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        voice_list = f"""üéµ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏:

–¢–ï–ö–£–©–ò–ô: {current_name}

üî∏ GOOGLE TTS:
/voicegtts - Google TTS (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, –±—ã—Å—Ç—Ä—ã–π)

üî∏ AZURE SPEECH SERVICES ({azure_status}):
/voicedmitri - –î–º–∏—Ç—Ä–∏–π (–º—É–∂—Å–∫–æ–π)
/voiceartem - –ê—Ä—Ç—ë–º (–º—É–∂—Å–∫–æ–π) 
/voicesvetlana - –°–≤–µ—Ç–ª–∞–Ω–∞ (–∂–µ–Ω—Å–∫–∏–π)
/voicedarya - –î–∞—Ä—å—è (–∂–µ–Ω—Å–∫–∏–π)
/voicepolina - –ü–æ–ª–∏–Ω–∞ (–∂–µ–Ω—Å–∫–∏–π)

‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏:
/voice_gtts, /voice_dmitri –∏ —Ç.–¥."""

        if not azure_api_key:
            voice_list += "\n\n‚ö†Ô∏è Azure –¥–≤–∏–∂–∫–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞ AZURE_SPEECH_KEY"
        
        await update.message.reply_text(voice_list)

    async def set_voice_engine_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, engine: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        user_id = update.effective_user.id
        
        logger.info(f"üéµ SET_VOICE_ENGINE_COMMAND CALLED! User {user_id} trying to set voice engine: {engine}")
        logger.info(f"üéµ Message text: '{update.message.text if update.message else 'No message'}'")
        logger.info(f"üéµ Available engines: {list(VOICE_ENGINES.keys())}")
        
        if engine not in VOICE_ENGINES:
            logger.warning(f"Unknown engine {engine} requested by user {user_id}")
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫.")
            return
        
        engine_info = VOICE_ENGINES[engine]
        logger.info(f"Engine info for {engine}: available={engine_info['available']}")
        
        if not engine_info["available"]:
            logger.warning(f"Engine {engine} not available for user {user_id}")
            await update.message.reply_text(f"‚ùå {engine_info['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        voice_engine_settings[user_id] = engine
        logger.info(f"Successfully set voice engine for user {user_id}: {engine}")
        
        await update.message.reply_text(
            f"‚úÖ –ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
            f"üéµ –ù–æ–≤—ã–π –≥–æ–ª–æ—Å: {engine_info['name']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {engine_info['description']}\n\n"
            f"üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–∞!\n"
            f"üí° –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å: /voice_select"
        )

    def clean_text_for_speech(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
        # –£–¥–∞–ª—è–µ–º markdown —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = re.sub(r'\*(.*?)\*', r'\1', text)      # –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤
        text = re.sub(r'`(.*?)`', r'\1', text)        # –£–±–∏—Ä–∞–µ–º –∫–æ–¥
        text = re.sub(r'#{1,6}\s*', '', text)         # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏
        text = re.sub(r'[_~]', '', text)              # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        text = re.sub(r'[üé§üéµüìùüí¨üñºÔ∏èüì∞üí∞‚ö°‚ùå‚úÖüîçüí≠üìäüí°üîÑ]', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        return text

    def smart_split_text(self, text: str, max_chars: int = 200) -> List[str]:
        """–£–º–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞"""
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å—Ç–µ–π
        if len(text) <= max_chars:
            return [text]
        
        parts = []
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º (—Ç–æ—á–∫–∞, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫)
        sentences = re.split(r'[.!?]+\s+', text)
        current_part = ""
        
        for sentence in sentences:
            sentence = sentence.strip()
            if not sentence:
                continue
                
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ (–±–æ–ª—å—à–µ max_chars), —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
            if len(sentence) > max_chars:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å
                if current_part:
                    parts.append(current_part.strip())
                    current_part = ""
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—è—Ç—ã–º
                clauses = sentence.split(',')
                for clause in clauses:
                    clause = clause.strip()
                    if not clause:
                        continue
                        
                    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –¥–æ–±–∞–≤–ª—è–µ–º
                    test_part = current_part + (", " if current_part else "") + clause
                    if len(test_part) <= max_chars:
                        current_part = test_part
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                        if current_part:
                            parts.append(current_part.strip())
                        current_part = clause
                
                # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                if len(current_part) > max_chars:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏—Ç–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
                    words = current_part.split()
                    temp_part = ""
                    for word in words:
                        test_part = temp_part + (" " if temp_part else "") + word
                        if len(test_part) <= max_chars:
                            temp_part = test_part
                        else:
                            if temp_part:
                                parts.append(temp_part.strip())
                            temp_part = word
                    current_part = temp_part
            else:
                # –û–±—ã—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                test_part = current_part + (". " if current_part else "") + sentence
                if len(test_part) <= max_chars:
                    current_part = test_part
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = sentence
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
        final_parts = []
        for part in parts:
            part = part.strip()
            if len(part) < 10:  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏
                if final_parts and len(final_parts[-1] + " " + part) <= max_chars:
                    final_parts[-1] = final_parts[-1] + " " + part
                elif part:  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å, –≤—Å—ë —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º
                    final_parts.append(part)
            else:
                final_parts.append(part)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ç—ã–π —Ç–µ–∫—Å—Ç
        if not final_parts:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏—Ç–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_chars
            for i in range(0, len(text), max_chars):
                final_parts.append(text[i:i + max_chars])
        
        return final_parts

    def clean_old_requests(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        now = datetime.now()
        minute_ago = now - timedelta(minutes=1)
        day_ago = now - timedelta(days=1)
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã
        request_counts[user_id]['minute'] = [
            req_time for req_time in request_counts[user_id]['minute'] 
            if req_time > minute_ago
        ]
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ä—à–µ –¥–Ω—è
        request_counts[user_id]['day'] = [
            req_time for req_time in request_counts[user_id]['day'] 
            if req_time > day_ago
        ]

    def get_remaining_requests(self, user_id: int) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.clean_old_requests(user_id)
        
        minute_requests = len(request_counts[user_id]['minute'])
        day_requests = len(request_counts[user_id]['day'])
        
        remaining_minute = max(0, MINUTE_LIMIT - minute_requests)
        remaining_day = max(0, DAILY_LIMIT - day_requests)
        
        return remaining_minute, remaining_day

    def can_make_request(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
        remaining_minute, remaining_day = self.get_remaining_requests(user_id)
        return remaining_minute > 0 and remaining_day > 0

    def add_request(self, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫"""
        now = datetime.now()
        request_counts[user_id]['minute'].append(now)
        request_counts[user_id]['day'].append(now)

    async def call_gemini_api(self, messages: List[dict]) -> Optional[str]:
        """–í—ã–∑–æ–≤ Gemini API"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            user_message = ""
            if messages and len(messages) > 0:
                user_message = messages[-1].get("content", "").lower()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
            age_related_keywords = ['–≤–æ–∑—Ä–∞—Å—Ç', '–ª–µ—Ç', '–≥–æ–¥–∞', '–≥–æ–¥—ã', '—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '—Ä–æ–¥–∏–ª—Å—è', '—Ä–æ–¥–∏–ª–∞—Å—å', '–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è']
            is_age_query = any(keyword in user_message for keyword in age_related_keywords)
            
            headers = {
                'Content-Type': 'application/json',
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è—è —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
            all_messages = []
            if is_age_query:
                current_date = datetime.now().strftime("%d.%m.%Y")
                system_message = f"–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è {current_date} –≥–æ–¥. –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ª—é–¥–µ–π –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –¥–∞—Ç—É."
                all_messages.append({"role": "system", "content": system_message})
            
            all_messages.extend(messages)
            
            data = {
                "contents": [
                    {
                        "parts": [
                            {"text": msg["content"]} for msg in all_messages
                        ]
                    }
                ]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{GEMINI_API_URL}?key={AI_API_KEY}",
                    headers=headers,
                    json=data,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if 'candidates' in result and len(result['candidates']) > 0:
                            return result['candidates'][0]['content']['parts'][0]['text']
                    else:
                        logger.error(f"Gemini API error: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"Error calling Gemini API: {e}")
            return None

    async def speech_to_text(self, audio_bytes: bytes) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"""
        if not VOICE_FEATURES_AVAILABLE:
            return None
            
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as ogg_file:
                ogg_file.write(audio_bytes)
                ogg_path = ogg_file.name
            
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as wav_file:
                wav_path = wav_file.name
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ WAV —Å –ø–æ–º–æ—â—å—é pydub
                logger.debug("Converting OGG to WAV...")
                audio = AudioSegment.from_ogg(ogg_path)
                audio = audio.set_frame_rate(16000).set_channels(1)  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                audio.export(wav_path, format="wav")
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                logger.debug("Recognizing speech...")
                recognizer = sr.Recognizer()
                
                with sr.AudioFile(wav_path) as source:
                    audio_data = recognizer.record(source)
                
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ä—É—Å—Å–∫–∏–π, –ø–æ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                try:
                    text = recognizer.recognize_google(audio_data, language="ru-RU")
                    logger.info(f"Speech recognized (Russian): {len(text)} characters")
                    return text
                except sr.UnknownValueError:
                    # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                    try:
                        text = recognizer.recognize_google(audio_data, language="en-US")
                        logger.info(f"Speech recognized (English): {len(text)} characters")
                        return text
                    except sr.UnknownValueError:
                        logger.warning("Could not understand audio in both Russian and English")
                        return None
                        
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                try:
                    os.unlink(ogg_path)
                    os.unlink(wav_path)
                except:
                    pass
                    
        except Exception as e:
            logger.error(f"Error in speech recognition: {e}")
            return None

    async def text_to_speech(self, text: str, user_id: int, language: str = "ru") -> Optional[bytes]:
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Google TTS –∏ Azure Speech Services"""
        if not VOICE_FEATURES_AVAILABLE:
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            if not text or len(text.strip()) < 3:
                logger.warning("Text too short for TTS")
                return None
                
            # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            logger.info(f"Synthesizing text of {len(text)} characters")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–≤–∏–∂–æ–∫
            engine = voice_engine_settings.get(user_id, DEFAULT_VOICE_ENGINE)
            logger.info(f"User {user_id} selected engine: {engine}")
            logger.debug(f"Converting text to speech with {engine}: {len(text)} characters")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–≤–∏–∂–∫–∞
            engine_info = VOICE_ENGINES.get(engine)
            if engine_info:
                logger.info(f"Engine info for {engine}: name='{engine_info['name']}', available={engine_info['available']}")
            else:
                logger.warning(f"No engine info found for {engine}")
            
            if engine == "gtts":
                logger.info("Using Google TTS")
                return await self._gtts_synthesize(text, language)
            elif engine.startswith("azure_"):
                logger.info(f"Using Azure Speech Services with engine: {engine}")
                # Azure Speech Services TTS
                engine_info = VOICE_ENGINES.get(engine)
                if engine_info and "azure_voice" in engine_info:
                    azure_voice = engine_info["azure_voice"]
                    logger.info(f"Using Azure voice: {azure_voice}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á Azure
                    azure_api_key = os.getenv('AZURE_SPEECH_KEY')
                    if not azure_api_key:
                        logger.warning("Azure Speech API key not configured, falling back to Google TTS")
                        return await self._gtts_synthesize(text, language)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è Azure
                    azure_result = await self._azure_synthesize(text, azure_voice)
                    if azure_result:
                        return azure_result
                    else:
                        # Fallback –∫ gTTS –ø—Ä–∏ –æ—à–∏–±–∫–µ Azure
                        logger.warning(f"Azure synthesis failed for {engine}, falling back to gTTS")
                        return await self._gtts_synthesize(text, language)
                else:
                    # Fallback –∫ gTTS
                    logger.warning(f"Azure voice not configured for {engine}, falling back to gTTS")
                    return await self._gtts_synthesize(text, language)
            else:
                # Fallback –∫ gTTS
                logger.warning(f"Engine {engine} not available or not supported, falling back to gTTS")
                logger.warning(f"Available engines: {list(VOICE_ENGINES.keys())}")
                return await self._gtts_synthesize(text, language)
                    
        except Exception as e:
            logger.error(f"Error in text-to-speech: {e}")
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è gTTS
            try:
                logger.info("Attempting fallback to gTTS due to error")
                return await self._gtts_synthesize(text, language)
            except:
                return None

    async def _gtts_synthesize(self, text: str, language: str) -> Optional[bytes]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é Google TTS"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                temp_path = temp_file.name
            
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ TTS –æ–±—ä–µ–∫—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                # slow=False –¥–µ–ª–∞–µ—Ç —Ä–µ—á—å –±—ã—Å—Ç—Ä–µ–µ
                tts = gTTS(text=text, lang=language, slow=False)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                tts.save(temp_path)
                
                # –ß—Ç–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
                with open(temp_path, 'rb') as audio_file:
                    audio_bytes = audio_file.read()
                
                logger.info(f"gTTS synthesis success: generated {len(audio_bytes)} bytes")
                return audio_bytes
                
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                try:
                    os.unlink(temp_path)
                except:
                    pass
                    
        except Exception as e:
            logger.error(f"Error in gTTS synthesis: {e}")
            return None

    async def _azure_synthesize(self, text: str, voice: str = "ru-RU-SvetlanaNeural") -> Optional[bytes]:
        """–°–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é Azure Speech Services"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ Azure
            azure_api_key = os.getenv('AZURE_SPEECH_KEY')
            azure_region = os.getenv('AZURE_SPEECH_REGION', 'eastus')
            
            if not azure_api_key:
                logger.error("Azure Speech API key not found")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –≥–æ–ª–æ—Å–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–º–µ–Ω–∏ –≥–æ–ª–æ—Å–∞
            # –î–ª—è —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤ Azure
            male_voices = ["ru-RU-DmitryNeural", "ru-RU-ArtemNeural"]
            female_voices = ["ru-RU-SvetlanaNeural", "ru-RU-DaryaNeural", "ru-RU-PolinaNeural"]
            
            gender = 'Male' if voice in male_voices else 'Female'
            logger.info(f"Using Azure voice {voice} with gender {gender}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SSML –¥–ª—è Azure Speech
            # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ñ–æ—Ä–º–∞—Ç SSML –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏ –∏–º–µ–Ω
            # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤ (–î–º–∏—Ç—Ä–∏–π, –ê—Ä—Ç—ë–º, –°–≤–µ—Ç–ª–∞–Ω–∞, –î–∞—Ä—å—è, –ü–æ–ª–∏–Ω–∞)
            ssml = f'<speak xmlns="http://www.w3.org/2001/10/synthesis" xmlns:mstts="http://www.w3.org/2001/mstts" version="1.0" xml:lang="ru-RU"><voice name="{voice}">{text}</voice></speak>'
            
            headers = {
                'Ocp-Apim-Subscription-Key': azure_api_key,
                'Content-Type': 'application/ssml+xml',
                'X-Microsoft-OutputFormat': 'audio-24khz-48kbitrate-mono-mp3'
            }
            
            url = f"https://{azure_region}.tts.speech.microsoft.com/cognitiveservices/v1"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, headers=headers, data=ssml.encode('utf-8'), timeout=30) as response:
                    if response.status == 200:
                        audio_data = await response.read()
                        logger.info(f"‚úÖ Azure Speech synthesis successful: {len(audio_data)} bytes")
                        return audio_data
                    else:
                        logger.error(f"Azure Speech API error: {response.status}")
                        error_text = await response.text()
                        logger.error(f"Error details: {error_text}")
                        return None
        
        except Exception as e:
            logger.error(f"Error in Azure Speech synthesis: {e}")
            return None

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        user_message = update.message.text
        user_id = update.message.from_user.id
        
        logger.info(f"Message from user {user_id}: {user_message[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if not self.can_make_request(user_id):
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                f"üïê –û—Å—Ç–∞–ª–æ—Å—å –≤ –º–∏–Ω—É—Ç–µ: {remaining_minute}\n"
                f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_day}"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥—É–º–∞–µ–º
        await self.send_service_message(update, context, "üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...", user_id)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_sessions[user_id].append({"role": "user", "content": user_message})
        messages = list(user_sessions[user_id])
        
        # –í—ã–∑–æ–≤ API
        response = await self.call_gemini_api(messages)
        
        if response:
            logger.info(f"Received response from Gemini API for user {user_id}: {len(response)} characters")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫
            self.add_request(user_id)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
            await self.cleanup_service_messages(update, context, user_id)
            
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            full_response = f"{response}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ –º–∏–Ω—É—Ç—É, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è"
            await self.safe_send_message(update, full_response)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_sessions[user_id].append({"role": "assistant", "content": response})
            
            logger.info(f"Successfully sent response to user {user_id}: {len(response)} characters")
        else:
            # Fallback –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
            await self.cleanup_service_messages(update, context, user_id)
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º"
            )

    def needs_current_data(self, query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω—ã –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        query_lower = query.lower()
        
        # –Ø–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        current_keywords = [
            '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
            '–∫—É—Ä—Å –≤–∞–ª—é—Ç', '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞', '–∫—É—Ä—Å –µ–≤—Ä–æ', '—Ü–µ–Ω–∞ bitcoin',
            '–ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è', '–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', '—Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞',
            '—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '–≤–æ–∑—Ä–∞—Å—Ç', '–∫–æ–≥–¥–∞ —Ä–æ–¥–∏–ª—Å—è', '–∫–æ–≥–¥–∞ —Ä–æ–¥–∏–ª–∞—Å—å'
        ]
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        time_keywords = [
            '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '–≤—á–µ—Ä–∞', '–∑–∞–≤—Ç—Ä–∞', '–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç',
            '–≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è', '—Ç–µ–∫—É—â–∏–π', '–∞–∫—Ç—É–∞–ª—å–Ω', '—Å–≤–µ–∂', '–ø–æ—Å–ª–µ–¥–Ω'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if any(keyword in query_lower for keyword in current_keywords):
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
        has_time_marker = any(keyword in query_lower for keyword in time_keywords)
        
        if has_time_marker:
            # –ò—Å–∫–ª—é—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–∞—Ö
            if '–∏–Ω—Ç–µ—Ä–µ—Å–Ω' in query_lower and '—Ñ–∞–∫—Ç' in query_lower:
                return False
            # –í–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
            return True
            
        return False

    async def get_current_data(self, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            if any(word in query.lower() for word in ['–Ω–æ–≤–æ—Å—Ç–∏', '–Ω–æ–≤–æ—Å—Ç—å', '–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫']):
                return await self.search_news(query)
            elif any(word in query.lower() for word in ['–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                return await self.search_currency_rates(query)
            elif any(word in query.lower() for word in ['–ø–æ–≥–æ–¥–∞']):
                return await self.search_weather_data(query)
            elif any(word in query.lower() for word in ['—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '–≤–æ–∑—Ä–∞—Å—Ç', '–ª–µ—Ç']):
                return await self.handle_age_query(query)
            else:
                # –û–±—â–∏–π –ø–æ–∏—Å–∫
                return await self.search_duckduckgo(query)
                
        except Exception as e:
            logger.error(f"Error getting current data: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."

    async def search_news(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            if self.news_client:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                numbers = re.findall(r'\d+', query)
                count = int(numbers[0]) if numbers else 10
                count = min(count, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 –Ω–æ–≤–æ—Å—Ç–µ–π
                
                articles = self.news_client.get_everything(
                    q='—Ä–æ—Å—Å–∏—è OR –ø–æ–ª–∏—Ç–∏–∫–∞ OR –ø—É—Ç–∏–Ω OR –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                    language='ru',
                    sort_by='publishedAt',
                    page_size=count
                )
                
                if articles['articles']:
                    news_list = []
                    for i, article in enumerate(articles['articles'][:count], 1):
                        title = article['title']
                        description = article.get('description', '')
                        url = article['url']
                        
                        news_item = f"{i}. {title}"
                        if description:
                            news_item += f"\n{description[:100]}..."
                        news_item += f"\nüîó {url}\n"
                        
                        news_list.append(news_item)
                    
                    return f"üì∞ –ü–û–°–õ–ï–î–ù–ò–ï –ù–û–í–û–°–¢–ò ({count} —à—Ç.):\n\n" + "\n".join(news_list)
            
            # Fallback –∫ –ø–æ–∏—Å–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            return await self.search_duckduckgo(query)
            
        except Exception as e:
            logger.error(f"News search error: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏."

    async def search_duckduckgo(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ DuckDuckGo"""
        try:
            from urllib.parse import quote
            search_query = quote(query)
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://html.duckduckgo.com/html/?q={search_query}",
                    headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'},
                    timeout=15
                ) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        results = []
                        for result in soup.find_all('div', {'class': 'result__body'})[:5]:
                            title_elem = result.find('a', {'class': 'result__a'})
                            snippet_elem = result.find('a', {'class': 'result__snippet'})
                            
                            if title_elem and snippet_elem:
                                title = title_elem.get_text().strip()
                                snippet = snippet_elem.get_text().strip()
                                url = title_elem.get('href', '')
                                
                                results.append(f"‚Ä¢ {title}\n{snippet}\nüîó {url}\n")
                        
                        if results:
                            return f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:\n\n" + "\n".join(results)
                        
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            
        except Exception as e:
            logger.error(f"DuckDuckGo search error: {e}")
            return "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞."

    async def search_currency_rates(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://www.cbr-xml-daily.ru/daily_json.js",
                    timeout=10
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        usd = data['Valute']['USD']['Value']
                        eur = data['Valute']['EUR']['Value']
                        
                        return f"üí∞ –ö–£–†–°–´ –í–ê–õ–Æ–¢ (–¶–ë –†–§):\n\nüíµ USD: {usd:.2f} ‚ÇΩ\nüí∂ EUR: {eur:.2f} ‚ÇΩ"
                        
        except Exception as e:
            logger.error(f"Currency search error: {e}")
            
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç."

    async def search_weather_data(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã"""
        return await self.search_duckduckgo(f"–ø–æ–≥–æ–¥–∞ {query}")

    async def handle_age_query(self, query: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π"""
        try:
            current_date = datetime.now().strftime("%d.%m.%Y")
            current_year = datetime.now().year
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
            age_prompt = f"""–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –°–µ–≥–æ–¥–Ω—è {current_date} ({current_year} –≥–æ–¥).
            
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {query}

–ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–∏–π {current_year} –≥–æ–¥. 
–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ä–æ–¥–∏–ª—Å—è –≤ 1971 –≥–æ–¥—É, —Ç–æ –≤ {current_year} –≥–æ–¥—É –µ–º—É {current_year - 1971} –ª–µ—Ç.

–û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ, —É–∫–∞–∑—ã–≤–∞—è —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ {current_year} –≥–æ–¥."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
            messages = [{"role": "user", "content": age_prompt}]
            response = await self.call_gemini_api(messages)
            
            if response:
                return response
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç."
                
        except Exception as e:
            logger.error(f"Age query error: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ."

    async def safe_send_message(self, update: Update, response: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤ Telegram"""
        max_length = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Telegram –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        if len(response) <= max_length:
            # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª–∏–∫–æ–º
            await update.message.reply_text(response)
        else:
            # –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            sentences = re.split(r'(?<=[.!?])\s+', response)
            
            for sentence in sentences:
                # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
                if len(current_part + sentence) <= max_length:
                    current_part += sentence + " "
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                    if current_part:
                        parts.append(current_part.strip())
                    
                    # –ï—Å–ª–∏ —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º
                    if len(sentence) > max_length:
                        for i in range(0, len(sentence), max_length):
                            parts.append(sentence[i:i + max_length])
                        current_part = ""
                    else:
                        current_part = sentence + " "
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if current_part:
                parts.append(current_part.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i, part in enumerate(parts):
                if i == 0:
                    await update.message.reply_text(part)
                else:
                    await update.message.reply_text(f"(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1}/{len(parts)})\n\n{part}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if i < len(parts) - 1:
                    await asyncio.sleep(0.5)

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        user_id = update.message.from_user.id
        
        if not self.can_make_request(user_id):
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                f"üïê –û—Å—Ç–∞–ª–æ—Å—å –≤ –º–∏–Ω—É—Ç–µ: {remaining_minute}\n"
                f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_day}"
            )
            return
            
        self.add_request(user_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(file.file_path) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        
                        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                        image_base64 = base64.b64encode(image_data).decode('utf-8')
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
                        headers = {'Content-Type': 'application/json'}
                        data = {
                            "contents": [
                                {
                                    "parts": [
                                        {"text": "–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ."},
                                        {
                                            "inline_data": {
                                                "mime_type": "image/jpeg",
                                                "data": image_base64
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                        
                        async with session.post(
                            f"{GEMINI_API_URL}?key={AI_API_KEY}",
                            headers=headers,
                            json=data,
                            timeout=30
                        ) as api_response:
                            if api_response.status == 200:
                                result = await api_response.json()
                                if 'candidates' in result and len(result['candidates']) > 0:
                                    response = result['candidates'][0]['content']['parts'][0]['text']
                                    await self.safe_send_message(update, response)
                                else:
                                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                            else:
                                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    else:
                        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                        
        except Exception as e:
            logger.error(f"Error processing photo: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_id = f"{user_id}_{update.message.message_id}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if message_id in processed_messages:
            logger.info(f"Message {message_id} already processed, skipping")
            return
        
        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
        processed_messages[message_id] = True
        
        logger.info(f"Received voice message from user {user_id}")
        
        if not VOICE_FEATURES_AVAILABLE:
            await update.message.reply_text(
                "üé§ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
                "–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
            )
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if not self.can_make_request(user_id):
                remaining_minute, remaining_day = self.get_remaining_requests(user_id)
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è."
                )
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            logger.info(f"Sent typing indicator for voice processing from user {user_id}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            voice_file = await update.message.voice.get_file()
            voice_bytes = await voice_file.download_as_bytearray()
            
            logger.info(f"Downloaded voice message: {len(voice_bytes)} bytes")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_service_message(update, context, "üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...", user_id)
            
            transcribed_text = await self.speech_to_text(bytes(voice_bytes))
            
            if not transcribed_text:
                await self.cleanup_service_messages(update, context, user_id)
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –≥—Ä–æ–º—á–µ\n"
                    "‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —à—É–º\n"
                    "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ"
                )
                return
            
            logger.info(f"Voice transcribed for user {user_id}: {transcribed_text[:50]}...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è - –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_service_message(update, context, f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{transcribed_text}\"", user_id)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_sessions[user_id].append({"role": "user", "content": transcribed_text})
            messages = list(user_sessions[user_id])

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_service_message(update, context, "üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...", user_id)
            
            logger.info(f"Calling Gemini API for voice message from user {user_id}")
            response = await self.call_gemini_api(messages)
            
            if response:
                logger.info(f"Received response from Gemini API for voice message from user {user_id}: {len(response)} characters")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫
                self.add_request(user_id)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
                remaining_minute, remaining_day = self.get_remaining_requests(user_id)
                
                # –ì–û–õ–û–°–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –í–°–ï–ì–î–ê –û–¢–í–ï–ß–ê–Æ–¢ –ì–û–õ–û–°–û–ú (–µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫)
                selected_engine = voice_engine_settings.get(user_id, DEFAULT_VOICE_ENGINE)
                if VOICE_ENGINES[selected_engine]["available"]:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.send_service_message(update, context, "üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...", user_id)
                    
                    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                    clean_response = self.clean_text_for_speech(response)
                    
                    # –î–õ–Ø –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô: –≤–µ—Å—å –æ—Ç–≤–µ—Ç –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                    logger.info(f"Synthesizing complete voice response: {len(clean_response)} characters")
                    voice_data = await self.text_to_speech(clean_response, user_id)
                    
                    if voice_data:
                        await self.cleanup_service_messages(update, context, user_id)
                        await update.message.reply_voice(
                            voice=BytesIO(voice_data),
                            caption=f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ –º–∏–Ω—É—Ç—É, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è"
                        )
                        logger.info(f"Successfully sent complete voice response to user {user_id}")
                        user_sessions[user_id].append({"role": "assistant", "content": response})
                    else:
                        # Fallback –∫ —Ç–µ–∫—Å—Ç—É
                        await self.cleanup_service_messages(update, context, user_id)
                        await update.message.reply_text(
                            f"üí¨ {response}\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ –º–∏–Ω—É—Ç—É, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è"
                        )
                        user_sessions[user_id].append({"role": "assistant", "content": response})
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    await self.cleanup_service_messages(update, context, user_id)
                    await update.message.reply_text(
                        f"üí¨ {response}\n\n"
                        f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ –º–∏–Ω—É—Ç—É, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è"
                    )
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    user_sessions[user_id].append({"role": "assistant", "content": response})
            else:
                await self.cleanup_service_messages(update, context, user_id)
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
                    "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º"
                )
                
        except Exception as e:
            logger.error(f"Error processing voice message: {e}")
            await self.cleanup_service_messages(update, context, user_id)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            if len(processed_messages) > 100:
                old_keys = list(processed_messages.keys())[:-50]  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º 50 –Ω–æ–≤—ã—Ö
                for key in old_keys:
                    processed_messages.pop(key, None)

    async def add_service_message(self, user_id: int, message_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        user_service_messages[user_id].append(message_id)

    async def cleanup_service_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            for message_id in user_service_messages[user_id]:
                try:
                    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message_id)
                except Exception as e:
                    logger.debug(f"Could not delete service message {message_id}: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            user_service_messages[user_id].clear()
            logger.debug(f"Cleaned up service messages for user {user_id}")
        except Exception as e:
            logger.error(f"Error cleaning up service messages for user {user_id}: {e}")
            
    async def send_service_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, user_id: int) -> Optional[int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.cleanup_service_messages(update, context, user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await update.message.reply_text(text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
            await self.add_service_message(user_id, message.message_id)
            
            return message.message_id
        except Exception as e:
            logger.error(f"Error sending service message: {e}")
            return None

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception: {context.error}")
    if update and hasattr(update, 'message') and update.message:
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

# HTTP —Å–µ—Ä–≤–µ—Ä –∏ webhook
async def health_check(request):
    """Health check endpoint"""
    return web.Response(text="Bot is running! Status: Active")

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    try:
        logger.info(f"Webhook received: {request.method} {request.path}")
        data = await request.json()
        logger.info(f"Webhook data keys: {list(data.keys())}")
        
        if not telegram_app:
            logger.error("telegram_app is None!")
            return web.Response(status=500, text="Bot not initialized")
            
        update = Update.de_json(data, telegram_app.bot)
        logger.info(f"Update processed: {update.update_id if update else 'None'}")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥
        if update and update.message and update.message.text:
            message_text = update.message.text
            logger.info(f"Message text: '{message_text}'")
            
            if message_text.startswith('/voice_'):
                logger.info(f"VOICE COMMAND DETECTED: {message_text}")
                logger.info(f"User ID: {update.effective_user.id if update.effective_user else 'Unknown'}")
                logger.info(f"Available handlers: {len(telegram_app.handlers)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
                for group in telegram_app.handlers.values():
                    for handler in group:
                        if hasattr(handler, 'command') and isinstance(handler.command, (list, set)):
                            if message_text[1:] in handler.command:
                                logger.info(f"Found handler for command: {message_text}")
                        elif hasattr(handler, 'command') and handler.command == message_text[1:]:
                            logger.info(f"Found handler for command: {message_text}")
        
        await telegram_app.process_update(update)
        return web.Response(status=200, text="OK")
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return web.Response(status=500, text=f"Error: {str(e)}")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–± —Å–µ—Ä–≤–µ—Ä–∞"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_post('/webhook', webhook_handler)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"Web server started on port {PORT}")
    logger.info(f"Routes: {[route.resource.canonical for route in app.router.routes()]}")
    return app

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global telegram_app
    
    logger.info("Starting Gemini Telegram Bot...")
    logger.info(f"TELEGRAM_TOKEN: {'‚úì' if TELEGRAM_TOKEN else '‚úó'}")
    logger.info(f"AI_API_KEY: {'‚úì' if AI_API_KEY else '‚úó'}")
    logger.info(f"NEWS_API_KEY: {'‚úì' if NEWS_API_KEY else '‚úó'}")
    logger.info(f"AZURE_SPEECH_KEY: {'‚úì' if os.getenv('AZURE_SPEECH_KEY') else '‚úó'}")
    logger.info(f"PORT: {PORT}")
    logger.info(f"RENDER environment: {'‚úì' if os.environ.get('RENDER') else '‚úó'}")
    
    if not TELEGRAM_TOKEN or not AI_API_KEY:
        logger.error("Missing required environment variables")
        return
        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏
    initialize_voice_engines()
    logger.info("Voice engines initialized")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
    bot = GeminiBot()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    telegram_app.add_handler(CommandHandler("start", bot.start_command))
    telegram_app.add_handler(CommandHandler("help", bot.help_command))
    telegram_app.add_handler(CommandHandler("clear", bot.clear_command))
    telegram_app.add_handler(CommandHandler("limits", bot.limits_command))
    telegram_app.add_handler(CommandHandler("voice", bot.voice_command))
    telegram_app.add_handler(CommandHandler("voice_select", bot.voice_select_command))
    # –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–æ –ª—è–º–±–¥–∞
    async def voice_gtts_command(u, c): await bot.set_voice_engine_command(u, c, "gtts")
    # Azure Speech Services –∫–æ–º–∞–Ω–¥—ã
    async def voice_dmitri_command(u, c): await bot.set_voice_engine_command(u, c, "azure_dmitri")
    async def voice_artem_command(u, c): await bot.set_voice_engine_command(u, c, "azure_artem")
    async def voice_svetlana_command(u, c): await bot.set_voice_engine_command(u, c, "azure_svetlana")
    async def voice_darya_command(u, c): await bot.set_voice_engine_command(u, c, "azure_darya")
    async def voice_polina_command(u, c): await bot.set_voice_engine_command(u, c, "azure_polina")
    
    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–û–ú–ê–ù–î –° –ü–û–î–ß–ï–†–ö–ò–í–ê–ù–ò–ï–ú –ò –ë–ï–ó
    # Google TTS
    telegram_app.add_handler(CommandHandler("voice_gtts", voice_gtts_command))
    telegram_app.add_handler(CommandHandler("voicegtts", voice_gtts_command))  # –ë–ï–ó –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    
    # Azure Speech Services –≥–æ–ª–æ—Å–∞
    # –ú—É–∂—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
    telegram_app.add_handler(CommandHandler("voice_dmitri", voice_dmitri_command))
    telegram_app.add_handler(CommandHandler("voicedmitri", voice_dmitri_command))  # –ë–ï–ó –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    telegram_app.add_handler(CommandHandler("voice_artem", voice_artem_command))
    telegram_app.add_handler(CommandHandler("voiceartem", voice_artem_command))  # –ë–ï–ó –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    
    # –ñ–µ–Ω—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞
    telegram_app.add_handler(CommandHandler("voice_svetlana", voice_svetlana_command))
    telegram_app.add_handler(CommandHandler("voicesvetlana", voice_svetlana_command))  # –ë–ï–ó –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    telegram_app.add_handler(CommandHandler("voice_darya", voice_darya_command))
    telegram_app.add_handler(CommandHandler("voicedarya", voice_darya_command))  # –ë–ï–ó –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    telegram_app.add_handler(CommandHandler("voice_polina", voice_polina_command))
    telegram_app.add_handler(CommandHandler("voicepolina", voice_polina_command))  # –ë–ï–ó –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è

    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    telegram_app.add_handler(MessageHandler(filters.PHOTO, bot.handle_photo))
    telegram_app.add_handler(MessageHandler(filters.VOICE, bot.handle_voice))
    telegram_app.add_error_handler(error_handler)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    is_production = os.environ.get('RENDER') is not None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await telegram_app.initialize()
    await telegram_app.start()
    
    # –û—á–∏—Å—Ç–∫–∞ webhook
    try:
        await telegram_app.bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"Error clearing webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–± —Å–µ—Ä–≤–µ—Ä–∞
    web_server = await start_web_server()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if is_production:
        # Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        webhook_url = "https://google-gemini-bot.onrender.com/webhook"
        logger.info(f"Setting webhook to {webhook_url}")
        
        try:
            await telegram_app.bot.set_webhook(url=webhook_url)
            logger.info("Webhook set successfully")
            
        except Exception as e:
            logger.error(f"Webhook error: {e}")
            # Fallback –∫ –ø–æ–ª–ª–∏–Ω–≥—É
            await telegram_app.updater.start_polling(drop_pending_updates=True)
            logger.info("Fallback to polling")
    else:
        # –ü–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("Starting polling mode")
        await telegram_app.updater.start_polling(drop_pending_updates=True)
        logger.info("Polling started")
    
    # –û–∂–∏–¥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    await asyncio.Event().wait()
    return web_server

if __name__ == '__main__':
    asyncio.run(main()) 