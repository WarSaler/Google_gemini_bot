import os
import logging
import asyncio
import base64
import tempfile
import re
import json
from datetime import datetime, timedelta
from collections import defaultdict, deque
from typing import Dict, List, Optional
import aiohttp
from io import BytesIO
import speech_recognition as sr
from pydub import AudioSegment
from gtts import gTTS
import wikipedia
from newsapi import NewsApiClient

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from keep_alive import start_server

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
AI_API_KEY = os.getenv('AI_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY')
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent'

# –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã Google Gemini 2.5 Flash Free Tier)
MINUTE_LIMIT = 10  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
DAILY_LIMIT = 250  # 250 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_sessions: Dict[int, deque] = defaultdict(lambda: deque(maxlen=50))
request_counts: Dict[int, Dict[str, List[datetime]]] = defaultdict(lambda: {'minute': [], 'day': []})
voice_settings: Dict[int, bool] = defaultdict(lambda: True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã

class GeminiBot:
    def __init__(self):
        self.bot = None
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NewsAPI –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å
        self.news_client = NewsApiClient(api_key=NEWS_API_KEY) if NEWS_API_KEY else None
        logger.info(f"NewsAPI initialized: {'Yes' if self.news_client else 'No (missing API key)'}")
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        welcome_message = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini Bot!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ üí¨ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üé§‚û°Ô∏èüéµ –ì–æ–ª–æ—Å–æ–≤—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ - –ø–æ–ª—É—á–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç!)
‚Ä¢ üñºÔ∏è –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ù–ï —Å–æ–∑–¥–∞—é –∫–∞—Ä—Ç–∏–Ω–∫–∏!)
‚Ä¢ üíª –†–∞–±–æ—Ç–æ–π —Å –∫–æ–¥–æ–º
‚Ä¢ üåê –ê–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (–Ω–æ–≤–æ—Å—Ç–∏, Wikipedia, –ø–æ–∏—Å–∫)

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º  
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
/limits - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
/voice - –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã

üéµ –ù–û–í–ò–ù–ö–ê: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º!
üåê –ù–û–í–ò–ù–ö–ê: –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ!

‚ö†Ô∏è –í–ê–ñ–ù–û: –Ø –º–æ–≥—É —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ –Ω–∞ –Ω–∏—Ö, –Ω–æ –ù–ï –ú–û–ì–£ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏!

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º!"""
        
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_message = """üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–±–æ—Ç –∑–∞–±—É–¥–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
/limits - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
/voice - –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω—ã)

üîÑ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
‚Ä¢ üé§‚û°Ô∏èüéµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º!
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ –±–µ–∑ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è

‚ö†Ô∏è –í–ê–ñ–ù–û –ø—Ä–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
‚Ä¢ –Ø –ê–ù–ê–õ–ò–ó–ò–†–£–Æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø–∏—Å—ã–≤–∞—é —á—Ç–æ –≤–∏–∂—É)
‚Ä¢ –Ø –ù–ï –°–û–ó–î–ê–Æ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ —Ñ–æ—Ç–æ
‚Ä¢ –Ø –ù–ï –†–ï–î–ê–ö–¢–ò–†–£–Æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

üéµ –ù–û–í–ò–ù–ö–ê - –ì–æ–ª–æ—Å–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–ª—É—á–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç!
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ —Å AI

üåê –ù–û–í–ò–ù–ö–ê - –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–≥–¥–∞ –Ω—É–∂–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia, DuckDuckGo –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å–ª–æ–≤–∞–º–∏: "—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–π—á–∞—Å", "–Ω–æ–≤–æ—Å—Ç–∏", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–π", "–∫—É—Ä—Å", "—Ü–µ–Ω–∞"
‚Ä¢ –ü—Ä–∏–º–µ—Ä: "–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è?" –∏–ª–∏ "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å–µ–π—á–∞—Å?"

‚ö° –õ–∏–º–∏—Ç—ã:
‚Ä¢ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
‚Ä¢ 250 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π) –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
        
        await update.message.reply_text(help_message)
        
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear"""
        user_id = update.effective_user.id
        user_sessions[user_id].clear()
        await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞! –Ø –∑–∞–±—ã–ª –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
    async def limits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /limits"""
        user_id = update.effective_user.id
        remaining_minute, remaining_day = self.get_remaining_requests(user_id)
        
        limits_message = f"""üìä –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:

üïê –í —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ: {remaining_minute}/{MINUTE_LIMIT}
üìÖ –°–µ–≥–æ–¥–Ω—è: {remaining_day}/{DAILY_LIMIT}

–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
        
        await update.message.reply_text(limits_message)
        
    async def voice_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /voice - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        voice_settings[user_id] = not voice_settings[user_id]
        
        if voice_settings[user_id]:
            message = """üéµ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´!

–¢–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º.

–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /voice —Å–Ω–æ–≤–∞."""
        else:
            message = """üîá –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –û–¢–ö–õ–Æ–ß–ï–ù–´!

–¢–µ–ø–µ—Ä—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º.

–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /voice —Å–Ω–æ–≤–∞."""
        
        await update.message.reply_text(message)

    def clean_text_for_speech(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç markdown –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è"""
        # –£–±–∏—Ä–∞–µ–º markdown —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)  # **–∂–∏—Ä–Ω—ã–π** -> –∂–∏—Ä–Ω—ã–π
        text = re.sub(r'\*([^*]+)\*', r'\1', text)      # *–∫—É—Ä—Å–∏–≤* -> –∫—É—Ä—Å–∏–≤
        text = re.sub(r'__([^_]+)__', r'\1', text)      # __–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__ -> –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π
        text = re.sub(r'_([^_]+)_', r'\1', text)        # _–∫—É—Ä—Å–∏–≤_ -> –∫—É—Ä—Å–∏–≤
        text = re.sub(r'`([^`]+)`', r'\1', text)        # `–∫–æ–¥` -> –∫–æ–¥
        text = re.sub(r'```[^`]*```', '', text)         # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[#‚Ä¢‚Üí‚Üê‚Üë‚Üì‚ö°üî•üí°üìäüéØüîß‚öôÔ∏è]', '', text)  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[-‚Äì‚Äî]{2,}', ' ', text)          # –î–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ
        text = re.sub(r'[|]', ' ', text)                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
        replacements = {
            'API': '–ê-–ü-–ò',
            'HTTP': '–•-–¢-–¢-–ü',
            'URL': '–Æ-–†-–õ',
            'CSS': '–¶-–°-–°',
            'HTML': '–•-–¢-–ú-–õ',
            'JSON': '–î-–ñ-–ï-–ô-–°-–û-–ù',
            'AI': '–ê-–ò',
            'ML': '–ú-–õ',
            'CI/CD': '–¶-–ò —Å–ª—ç—à –¶-–î',
        }
        
        for abbr, replacement in replacements.items():
            text = re.sub(r'\b' + abbr + r'\b', replacement, text, flags=re.IGNORECASE)
        
        # –û—á–∏—Å—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n+', ' ', text)               # –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ -> –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)               # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã -> –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª
        text = text.strip()                            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        
        return text

    def clean_old_requests(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        now = datetime.now()
        minute_ago = now - timedelta(minutes=1)
        day_ago = now - timedelta(days=1)
        
        # –û—á–∏—Å—Ç–∫–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        request_counts[user_id]['minute'] = [
            req_time for req_time in request_counts[user_id]['minute'] 
            if req_time > minute_ago
        ]
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        request_counts[user_id]['day'] = [
            req_time for req_time in request_counts[user_id]['day'] 
            if req_time > day_ago
        ]

    def get_remaining_requests(self, user_id: int) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.clean_old_requests(user_id)
        
        minute_count = len(request_counts[user_id]['minute'])
        day_count = len(request_counts[user_id]['day'])
        
        remaining_minute = max(0, MINUTE_LIMIT - minute_count)
        remaining_day = max(0, DAILY_LIMIT - day_count)
        
        return remaining_minute, remaining_day

    def can_make_request(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
        remaining_minute, remaining_day = self.get_remaining_requests(user_id)
        return remaining_minute > 0 and remaining_day > 0

    def add_request(self, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫"""
        now = datetime.now()
        request_counts[user_id]['minute'].append(now)
        request_counts[user_id]['day'].append(now)

    async def call_gemini_api(self, messages: List[dict]) -> Optional[str]:
        """–í—ã–∑–æ–≤ API Gemini"""
        headers = {
            'Content-Type': 'application/json',
        }
        
        payload = {
            'contents': [
                {
                    'parts': messages
                }
            ],
            'generationConfig': {
                'temperature': 0.7,
                'topK': 40,
                'topP': 0.95,
                'maxOutputTokens': 2048,
            }
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                logger.debug(f"Sending request to Gemini API...")
                async with session.post(
                    f"{GEMINI_API_URL}?key={AI_API_KEY}",
                    headers=headers,
                    json=payload
                ) as response:
                    logger.debug(f"Gemini API responded with status: {response.status}")
                    if response.status == 200:
                        data = await response.json()
                        if 'candidates' in data and len(data['candidates']) > 0:
                            result = data['candidates'][0]['content']['parts'][0]['text']
                            logger.info(f"Gemini API success: received {len(result)} characters")
                            return result
                        else:
                            logger.error(f"Gemini API: No candidates in response. Full response: {data}")
                            return None
                    else:
                        error_text = await response.text()
                        logger.error(f"Gemini API Error: {response.status}")
                        logger.error(f"Error details: {error_text}")
                        return None
        except Exception as e:
            logger.error(f"Exception calling Gemini API: {e}")
            logger.error(f"Exception type: {type(e).__name__}")
            return None

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        logger.info(f"Received message from user {user_id}: {message_text[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if not self.can_make_request(user_id):
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            await update.message.reply_text(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è."
            )
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_sessions:
            user_sessions[user_id] = deque(maxlen=50)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_sessions[user_id].append({
            'role': 'user',
            'content': message_text,
            'timestamp': datetime.now()
        })

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.needs_current_data(message_text):
                await update.message.reply_text("üîç –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
                current_info = await self.get_current_data(message_text)
                
                if current_info:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    enhanced_message = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {message_text}

–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:
{current_info}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞–∫ —Å–≤–æ–∏ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è, —Ç–∞–∫ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º, –æ—Ç–¥–∞–≤–∞–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Gemini API
                    messages = [{'text': enhanced_message}]
                    logger.info(f"Enhanced query prepared for user {user_id} with current data")
                else:
                    # –ï—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                    messages = [{'text': message_text}]
                    logger.info(f"No current data found, using regular query for user {user_id}")
            else:
                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                messages = [{'text': message_text}]
                logger.info(f"Regular query for user {user_id} (no current data needed)")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
            context_messages = []
            for session_msg in list(user_sessions[user_id])[-10:]:
                if session_msg['role'] == 'user':
                    context_messages.insert(0, {'text': f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ: {session_msg['content']}"})
                else:
                    context_messages.insert(0, {'text': f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–Ω–µ–µ: {session_msg['content']}"})
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            all_messages = context_messages + messages

            # –í—ã–∑–æ–≤ Gemini API
            logger.info(f"Calling Gemini API for user {user_id} with {len(all_messages)} messages")
            response = await self.call_gemini_api(all_messages)
            
            if response:
                logger.info(f"Received response from Gemini API for user {user_id}: {len(response)} characters")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫
                self.add_request(user_id)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                user_sessions[user_id].append({
                    'role': 'assistant',
                    'content': response,
                    'timestamp': datetime.now()
                })
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
                remaining_minute, remaining_day = self.get_remaining_requests(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
                await self.safe_send_message(update, response, remaining_minute, remaining_day, user_id)
            else:
                logger.error(f"No response received from Gemini API for user {user_id}")
                await self.safe_send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None, None, user_id)
                
        except Exception as e:
            logger.error(f"Error in enhanced_handle_message for user {user_id}: {e}")
            await self.safe_send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", None, None, user_id)

    async def safe_send_message(self, update: Update, response: str, remaining_minute: int = None, remaining_day: int = None, user_id: int = None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if remaining_minute is not None and remaining_day is not None:
                full_response = f"{response}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è."
            else:
                full_response = response
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞)
            try:
                await update.message.reply_text(full_response)
                logger.info(f"Message sent successfully to user {user_id}")
                return
            except Exception as e:
                logger.warning(f"First send attempt failed for user {user_id}: {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 2: –±–µ–∑ —ç–º–æ–¥–∑–∏
            try:
                if remaining_minute is not None and remaining_day is not None:
                    simple_response = f"{response}\n\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è."
                else:
                    simple_response = response
                await update.message.reply_text(simple_response)
                logger.info(f"Message sent successfully (without emoji) to user {user_id}")
                return
            except Exception as e:
                logger.warning(f"Second send attempt failed for user {user_id}: {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 3: —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
            try:
                await update.message.reply_text(response)
                logger.info(f"Message sent successfully (response only) to user {user_id}")
                return
            except Exception as e:
                logger.warning(f"Third send attempt failed for user {user_id}: {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 4: —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            try:
                escaped_response = response.replace('.', '\\.')
                await update.message.reply_text(escaped_response)
                logger.info(f"Message sent successfully (escaped) to user {user_id}")
                return
            except Exception as e:
                logger.warning(f"Fourth send attempt failed for user {user_id}: {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ 5: –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await update.message.reply_text("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"All send attempts failed for user {user_id}, sent generic error message")
            
        except Exception as e:
            logger.error(f"Critical error in safe_send_message for user {user_id}: {e}")

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        logger.info(f"Received photo from user {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if not self.can_make_request(user_id):
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            await update.message.reply_text(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è."
            )
            return

        try:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo_file = await update.message.photo[-1].get_file()
            photo_bytes = await photo_file.download_as_bytearray()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
            photo_base64 = base64.b64encode(photo_bytes).decode('utf-8')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            caption = update.message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [
                {'text': caption},
                {
                    'inline_data': {
                        'mime_type': 'image/jpeg',
                        'data': photo_base64
                    }
                }
            ]
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_sessions[user_id].append({
                'role': 'user',
                'content': f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] {caption}",
                'timestamp': datetime.now()
            })

            # –í—ã–∑–æ–≤ API
            logger.info(f"Calling Gemini API for image analysis from user {user_id}")
            response = await self.call_gemini_api(messages)
            
            if response:
                logger.info(f"Received image analysis response for user {user_id}: {len(response)} characters")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫
                self.add_request(user_id)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                user_sessions[user_id].append({
                    'role': 'assistant',
                    'content': response,
                    'timestamp': datetime.now()
                })
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
                remaining_minute, remaining_day = self.get_remaining_requests(user_id)
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
                await self.safe_send_message(update, response, remaining_minute, remaining_day, user_id)
            else:
                logger.error(f"No response received from Gemini API for image analysis from user {user_id}")
                await self.safe_send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None, None, user_id)
                
        except Exception as e:
            logger.error(f"Error handling photo from user {user_id}: {e}")
            await self.safe_send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", None, None, user_id)

    async def speech_to_text(self, audio_bytes: bytes) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as ogg_file:
                ogg_file.write(audio_bytes)
                ogg_path = ogg_file.name
            
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as wav_file:
                wav_path = wav_file.name
            
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ WAV —Å –ø–æ–º–æ—â—å—é pydub
                logger.debug("Converting OGG to WAV...")
                audio = AudioSegment.from_ogg(ogg_path)
                audio = audio.set_frame_rate(16000).set_channels(1)  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                audio.export(wav_path, format="wav")
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                logger.debug("Recognizing speech...")
                recognizer = sr.Recognizer()
                
                with sr.AudioFile(wav_path) as source:
                    audio_data = recognizer.record(source)
                
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ä—É—Å—Å–∫–∏–π, –ø–æ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                try:
                    text = recognizer.recognize_google(audio_data, language="ru-RU")
                    logger.info(f"Speech recognized (Russian): {len(text)} characters")
                    return text
                except sr.UnknownValueError:
                    # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                    try:
                        text = recognizer.recognize_google(audio_data, language="en-US")
                        logger.info(f"Speech recognized (English): {len(text)} characters")
                        return text
                    except sr.UnknownValueError:
                        logger.warning("Could not understand audio in both Russian and English")
                        return None
                        
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                try:
                    os.unlink(ogg_path)
                    os.unlink(wav_path)
                except:
                    pass
                    
        except Exception as e:
            logger.error(f"Error in speech recognition: {e}")
            return None

    async def text_to_speech(self, text: str, language: str = "ru") -> Optional[bytes]:
        """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é gTTS"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            if not text or len(text.strip()) < 3:
                logger.warning("Text too short for TTS")
                return None
                
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ (gTTS –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã)
            if len(text) > 1000:
                text = text[:1000] + "..."
            
            logger.debug(f"Converting text to speech: {len(text)} characters")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                temp_path = temp_file.name
            
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ TTS –æ–±—ä–µ–∫—Ç–∞
                tts = gTTS(text=text, lang=language, slow=False)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                tts.save(temp_path)
                
                # –ß—Ç–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
                with open(temp_path, 'rb') as audio_file:
                    audio_bytes = audio_file.read()
                
                logger.info(f"Text-to-speech success: generated {len(audio_bytes)} bytes")
                return audio_bytes
                
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                try:
                    os.unlink(temp_path)
                except:
                    pass
                    
        except Exception as e:
            logger.error(f"Error in text-to-speech: {e}")
            return None

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        logger.info(f"Received voice message from user {user_id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if not self.can_make_request(user_id):
                remaining_minute, remaining_day = self.get_remaining_requests(user_id)
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!\n\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è."
                )
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            logger.info(f"Sent typing indicator for voice processing from user {user_id}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            voice_file = await update.message.voice.get_file()
            voice_bytes = await voice_file.download_as_bytearray()
            
            logger.info(f"Downloaded voice message: {len(voice_bytes)} bytes")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            await update.message.reply_text("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
            transcribed_text = await self.speech_to_text(bytes(voice_bytes))
            
            if not transcribed_text:
                await self.safe_send_message(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç—á–µ.", None, None, user_id)
                return
            
            logger.info(f"Voice transcribed for user {user_id}: {transcribed_text[:100]}...")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Gemini API (–ë–ï–ó –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
            messages = [{'text': transcribed_text}]

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Ä–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
            await update.message.reply_text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{transcribed_text}\"\n\nüí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
            
            logger.info(f"Calling Gemini API for voice message from user {user_id}")
            response = await self.call_gemini_api(messages)
            
            if response:
                logger.info(f"Received response from Gemini API for voice message from user {user_id}: {len(response)} characters")
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫
                self.add_request(user_id)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤
                remaining_minute, remaining_day = self.get_remaining_requests(user_id)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if voice_settings[user_id]:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    await update.message.reply_text("üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...")
                    
                    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                    clean_response = self.clean_text_for_speech(response)
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è TTS (—Ä—É—Å—Å–∫–∏–π –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –∏–Ω–∞—á–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
                    tts_language = "ru" if any('\u0400' <= char <= '\u04FF' for char in clean_response) else "en"
                    
                    # –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
                    voice_bytes = await self.text_to_speech(clean_response, tts_language)
                    
                    if voice_bytes:
                        try:
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            await update.message.reply_voice(
                                voice=BytesIO(voice_bytes),
                                caption=f"üé§‚û°Ô∏èüéµ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_minute}/{MINUTE_LIMIT} –≤ –º–∏–Ω—É—Ç—É, {remaining_day}/{DAILY_LIMIT} —Å–µ–≥–æ–¥–Ω—è\n\nüí° –û—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: /voice"
                            )
                            logger.info(f"Successfully sent voice response to user {user_id}")
                        except Exception as e:
                            logger.error(f"Failed to send voice message to user {user_id}: {e}")
                            # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ—Ç–≤–µ—Ç—É
                            await self.safe_send_message(update, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç, –≤–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{response}", remaining_minute, remaining_day, user_id)
                    else:
                        logger.error(f"Voice synthesis failed for user {user_id}")
                        # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ—Ç–≤–µ—Ç—É
                        await self.safe_send_message(update, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç, –≤–æ—Ç —Ç–µ–∫—Å—Ç:\n\n{response}", remaining_minute, remaining_day, user_id)
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã
                    await self.safe_send_message(update, f"üìù {response}\n\nüí° –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: /voice", remaining_minute, remaining_day, user_id)
            else:
                logger.error(f"No response received from Gemini API for voice message from user {user_id}")
                await self.safe_send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None, None, user_id)
                
        except Exception as e:
            logger.error(f"Error handling voice message from user {user_id}: {e}")
            await self.safe_send_message(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", None, None, user_id)

    def is_markdown(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è markdown –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
        # –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        return False

    async def search_duckduckgo(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo Instant Answer API"""
        try:
            url = "https://api.duckduckgo.com/"
            params = {
                'q': query,
                'format': 'json',
                'no_html': '1',
                'skip_disambig': '1'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        result = []
                        
                        if data.get('Abstract'):
                            result.append(f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data['Abstract']}")
                        
                        if data.get('Definition'):
                            result.append(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {data['Definition']}")
                        
                        # –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
                        if data.get('RelatedTopics'):
                            topics = [topic.get('Text', '') for topic in data['RelatedTopics'][:3] if topic.get('Text')]
                            if topics:
                                result.append(f"–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: {'; '.join(topics)}")
                        
                        logger.info(f"DuckDuckGo search result: {len(result)} items found")
                        return '\n'.join(result) if result else None
                        
        except Exception as e:
            logger.error(f"DuckDuckGo search error: {e}")
            return None
    
    async def search_wikipedia(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ Wikipedia"""
        try:
            # –ü–æ–∏—Å–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            wikipedia.set_lang("ru")
            
            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            search_results = wikipedia.search(query, results=3)
            if not search_results:
                # –ï—Å–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                wikipedia.set_lang("en")
                search_results = wikipedia.search(query, results=3)
            
            if search_results:
                try:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
                    summary = wikipedia.summary(search_results[0], sentences=3)
                    logger.info(f"Wikipedia search result: {len(summary)} characters")
                    return f"Wikipedia: {summary}"
                except wikipedia.exceptions.DisambiguationError as e:
                    # –ï—Å–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    summary = wikipedia.summary(e.options[0], sentences=3)
                    logger.info(f"Wikipedia disambiguation resolved: {len(summary)} characters")
                    return f"Wikipedia: {summary}"
                    
        except Exception as e:
            logger.error(f"Wikipedia search error: {e}")
            
        return None
    
    async def search_news(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ NewsAPI"""
        if not self.news_client:
            logger.warning("NewsAPI client not initialized - missing API key")
            return None
            
        try:
            # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            news = self.news_client.get_everything(
                q=query,
                language='ru',
                sort_by='publishedAt',
                page_size=3,
                from_param=(datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            )
            
            if news['articles']:
                articles = []
                for article in news['articles'][:3]:
                    title = article.get('title', '')
                    description = article.get('description', '')
                    published = article.get('publishedAt', '')
                    
                    if title:
                        article_text = f"{title}"
                        if description:
                            article_text += f": {description}"
                        if published:
                            date = published.split('T')[0]
                            article_text += f" ({date})"
                        articles.append(article_text)
                
                logger.info(f"News search result: {len(articles)} articles found")
                return f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n" + '\n'.join(articles)
                
        except Exception as e:
            logger.error(f"News search error: {e}")
            
        return None
    
    def needs_current_data(self, query: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω—ã –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        current_keywords = [
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '—Å–µ–π—á–∞—Å', '—Ç–µ–∫—É—â–∏–π', '–∞–∫—Ç—É–∞–ª—å–Ω', '–ø–æ—Å–ª–µ–¥–Ω',
            '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–æ–±—ã—Ç–∏—è', '–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç', '—Å–ª—É—á–∏–ª–æ—Å—å', '–Ω–µ–¥–∞–≤–Ω–æ',
            
            # –ò–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
            '–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–æ–≥–æ–¥–∞', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            '–∫–æ—Ç–∏—Ä–æ–≤–∫–∏', '–≤–∞–ª—é—Ç', '–±–∏—Ç–∫–æ–∏–Ω', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', '–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ',
            
            # –°–≤–µ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            '2024', '2025', '—ç—Ç–æ—Ç –≥–æ–¥', '—ç—Ç–æ—Ç –º–µ—Å—è—Ü', '–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç',
            '—á—Ç–æ –Ω–æ–≤–æ–≥–æ', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–∏–∑–º–µ–Ω–µ–Ω–∏—è',
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏
            'today', 'now', 'current', 'latest', 'recent', 'news', 'update'
        ]
        
        query_lower = query.lower()
        result = any(keyword in query_lower for keyword in current_keywords)
        logger.info(f"Current data needed for query '{query[:50]}...': {result}")
        return result
    
    async def get_current_data(self, query: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        results = []
        
        logger.info(f"Starting current data search for: {query[:50]}...")
        
        # –ü–æ–∏—Å–∫ –≤ DuckDuckGo
        ddg_result = await self.search_duckduckgo(query)
        if ddg_result:
            results.append(f"üîç –ü–æ–∏—Å–∫: {ddg_result}")
        
        # –ü–æ–∏—Å–∫ –≤ Wikipedia
        wiki_result = await self.search_wikipedia(query)
        if wiki_result:
            results.append(f"üìö {wiki_result}")
        
        # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á API)
        news_result = await self.search_news(query)
        if news_result:
            results.append(f"üì∞ {news_result}")
        
        combined_result = '\n\n'.join(results) if results else ""
        logger.info(f"Current data search completed: {len(results)} sources found")
        return combined_result

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    import traceback
    
    error_msg = f"Exception while handling an update: {context.error}"
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    if "Conflict" in str(context.error) and "getUpdates" in str(context.error):
        logger.error("CONFLICT DETECTED: Multiple bot instances running!")
        logger.error("This usually means:")
        logger.error("1. Bot is running locally while also on Render")
        logger.error("2. Multiple Render deployments with same token")
        logger.error("3. Webhook was not properly cleared")
        return
    
    logger.error(error_msg)
    logger.error(f"Traceback: {traceback.format_exc()}")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å update, –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if update:
        logger.error(f"Update that caused error: {update}")

async def watchdog():
    """–§—É–Ω–∫—Ü–∏—è watchdog –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è"""
    start_time = datetime.now()
    last_activity = datetime.now()
    
    while True:
        try:
            await asyncio.sleep(180)  # –ö–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
            
            current_time = datetime.now()
            uptime = current_time - start_time
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è
            logger.info(f"üîç Bot Watchdog: Uptime {uptime}, Last activity: {current_time}")
            logger.info(f"üìä Active users: {len(user_sessions)}, Total request counters: {len(request_counts)}")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            if current_time.minute % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                logger.info("üßπ Cleaning old session data...")
                cleanup_old_data()
                
        except Exception as e:
            logger.error(f"Watchdog error: {e}")

def cleanup_old_data():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    now = datetime.now()
    cutoff = now - timedelta(hours=24)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
    users_to_remove = []
    for user_id, session in user_sessions.items():
        if session and len(session) > 0:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–æ–µ, —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            try:
                if session[-1].get('timestamp', now) < cutoff:
                    users_to_remove.append(user_id)
            except (AttributeError, IndexError):
                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –æ—á–∏—â–∞–µ–º
                users_to_remove.append(user_id)
    
    for user_id in users_to_remove:
        del user_sessions[user_id]
        logger.debug(f"Cleaned old session for user {user_id}")
    
    if users_to_remove:
        logger.info(f"üßπ Cleaned {len(users_to_remove)} old user sessions")

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN or not AI_API_KEY:
        logger.error("Missing required environment variables: TELEGRAM_TOKEN or AI_API_KEY")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    bot = GeminiBot()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("clear", bot.clear_command))
    application.add_handler(CommandHandler("limits", bot.limits_command))
    application.add_handler(CommandHandler("voice", bot.voice_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, bot.handle_photo))
    application.add_handler(MessageHandler(filters.VOICE, bot.handle_voice))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Starting bot...")
    await application.initialize()
    await application.start()
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    logger.info("Performing ULTRA-aggressive webhook cleanup...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    try:
        logger.info("Force clearing all pending updates...")
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ pending updates
        try:
            updates = await application.bot.get_updates(timeout=1, limit=100)
            if updates:
                logger.info(f"Found {len(updates)} pending updates - clearing...")
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π update_id –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
                last_update_id = updates[-1].update_id
                await application.bot.get_updates(offset=last_update_id + 1, timeout=1)
        except Exception as e:
            logger.info(f"Pending updates clear attempt: {e}")
    except Exception as e:
        logger.warning(f"Force clear failed: {e}")
    
    cleanup_attempts = 8  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –¥–æ 8
    for attempt in range(cleanup_attempts):
        try:
            logger.info(f"Webhook cleanup attempt {attempt + 1}/{cleanup_attempts}")
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ webhook
            await application.bot.delete_webhook(drop_pending_updates=True)
            await asyncio.sleep(1)
            await application.bot.delete_webhook()
            await asyncio.sleep(1)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            try:
                await application.bot.set_webhook("")  # –ü—É—Å—Ç–æ–π webhook
                await asyncio.sleep(1)
                await application.bot.delete_webhook(drop_pending_updates=True)
            except:
                pass
                
            logger.info(f"Webhook cleanup attempt {attempt + 1} completed")
            break
        except Exception as e:
            logger.warning(f"Webhook cleanup attempt {attempt + 1} failed: {e}")
            if attempt < cleanup_attempts - 1:
                await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    
    logger.info("Waiting for COMPLETE cleanup...")
    await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –¥–æ 10 —Å–µ–∫—É–Ω–¥
    
    # –ó–∞–ø—É—Å–∫ polling —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
    max_retries = 5
    for attempt in range(max_retries):
        try:
            logger.info(f"Starting polling (attempt {attempt + 1}/{max_retries})...")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt > 0:
                logger.info("Additional cleanup before retry...")
                try:
                    await application.bot.delete_webhook(drop_pending_updates=True)
                    await asyncio.sleep(2)
                except:
                    pass
            
            await application.updater.start_polling(
                allowed_updates=Update.ALL_TYPES, 
                drop_pending_updates=True,
                timeout=45,
                pool_timeout=45,
                connect_timeout=30,
                read_timeout=30
            )
            logger.info("Polling started successfully")
            break
        except Exception as e:
            logger.error(f"Polling failed on attempt {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                wait_time = (attempt + 1) * 15  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                logger.info(f"Waiting {wait_time} seconds before retry...")
                await asyncio.sleep(wait_time)
            else:
                logger.error("All polling attempts failed - this indicates a serious configuration issue")
                logger.error("Possible causes:")
                logger.error("1. Bot token is being used by another instance")
                logger.error("2. Webhook is set externally")
                logger.error("3. Network connectivity issues")
                return
    
    # –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    try:
        logger.info("Bot is now running and waiting for messages...")
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        logger.info("Stopping bot...")
    finally:
        await application.stop()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("Starting Gemini Telegram Bot...")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await asyncio.sleep(1)
    
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞, –±–æ—Ç–∞ –∏ watchdog –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    try:
        logger.info("üöÄ Starting all services: HTTP server + Bot + Watchdog...")
        await asyncio.gather(
            start_server(),
            run_bot(),
            watchdog()
        )
    except Exception as e:
        logger.error(f"Critical error in main: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        logger.info("Attempting restart in 30 seconds...")
        await asyncio.sleep(30)
        raise

if __name__ == '__main__':
    asyncio.run(main()) 