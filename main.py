import os
import logging
import asyncio
import base64
import re
from datetime import datetime, timedelta
from collections import defaultdict, deque
from typing import Dict, List, Optional
import aiohttp
from aiohttp import web
from newsapi import NewsApiClient
from bs4 import BeautifulSoup

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
AI_API_KEY = os.getenv('AI_API_KEY')
NEWS_API_KEY = os.getenv('NEWS_API_KEY')
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent'
PORT = int(os.getenv('PORT', 10000))

# –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
MINUTE_LIMIT = 10
DAILY_LIMIT = 250

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_sessions: Dict[int, deque] = defaultdict(lambda: deque(maxlen=50))
request_counts: Dict[int, Dict[str, List[datetime]]] = defaultdict(lambda: {'minute': [], 'day': []})

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_app = None

class GeminiBot:
    def __init__(self):
        self.news_client = NewsApiClient(api_key=NEWS_API_KEY) if NEWS_API_KEY else None
        logger.info(f"NewsAPI initialized: {'Yes' if self.news_client else 'No'}")
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gemini Bot!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ üí¨ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üñºÔ∏è –ê–Ω–∞–ª–∏–∑–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ üåê –ü–æ–∏—Å–∫–æ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ö–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
/limits - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"""
        
        await update.message.reply_text(welcome_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_message = """üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
/limits - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤

üîÑ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

‚ö° –õ–∏–º–∏—Ç—ã: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É, 250 –≤ –¥–µ–Ω—å"""
        
        await update.message.reply_text(help_message)
        
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear"""
        user_id = update.effective_user.id
        user_sessions[user_id].clear()
        await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
        
    async def limits_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /limits"""
        user_id = update.effective_user.id
        remaining_minute, remaining_day = self.get_remaining_requests(user_id)
        
        limits_message = f"""üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:

üïê –í —ç—Ç–æ–π –º–∏–Ω—É—Ç–µ: {remaining_minute}/{MINUTE_LIMIT}
üìÖ –°–µ–≥–æ–¥–Ω—è: {remaining_day}/{DAILY_LIMIT}"""
        
        await update.message.reply_text(limits_message)

    def clean_old_requests(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        now = datetime.now()
        minute_ago = now - timedelta(minutes=1)
        day_ago = now - timedelta(days=1)
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã
        request_counts[user_id]['minute'] = [
            req_time for req_time in request_counts[user_id]['minute'] 
            if req_time > minute_ago
        ]
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ä—à–µ –¥–Ω—è
        request_counts[user_id]['day'] = [
            req_time for req_time in request_counts[user_id]['day'] 
            if req_time > day_ago
        ]

    def get_remaining_requests(self, user_id: int) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.clean_old_requests(user_id)
        
        minute_requests = len(request_counts[user_id]['minute'])
        day_requests = len(request_counts[user_id]['day'])
        
        remaining_minute = max(0, MINUTE_LIMIT - minute_requests)
        remaining_day = max(0, DAILY_LIMIT - day_requests)
        
        return remaining_minute, remaining_day

    def can_make_request(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
        remaining_minute, remaining_day = self.get_remaining_requests(user_id)
        return remaining_minute > 0 and remaining_day > 0

    def add_request(self, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—á–µ—Ç—á–∏–∫"""
        now = datetime.now()
        request_counts[user_id]['minute'].append(now)
        request_counts[user_id]['day'].append(now)

    async def call_gemini_api(self, messages: List[dict]) -> Optional[str]:
        """–í—ã–∑–æ–≤ Gemini API"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
            current_date = datetime.now().strftime("%d.%m.%Y")
            system_message = f"–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è {current_date} –≥–æ–¥. –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ª—é–¥–µ–π –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –¥–∞—Ç—É."
            
            headers = {
                'Content-Type': 'application/json',
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            all_messages = [{"role": "system", "content": system_message}] + messages
            
            data = {
                "contents": [
                    {
                        "parts": [
                            {"text": msg["content"]} for msg in all_messages
                        ]
                    }
                ]
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{GEMINI_API_URL}?key={AI_API_KEY}",
                    headers=headers,
                    json=data,
                    timeout=30
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        if 'candidates' in result and len(result['candidates']) > 0:
                            return result['candidates'][0]['content']['parts'][0]['text']
                    else:
                        logger.error(f"Gemini API error: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"Error calling Gemini API: {e}")
            return None

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        user_message = update.message.text
        user_id = update.message.from_user.id
        
        logger.info(f"Message from user {user_id}: {user_message[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if not self.can_make_request(user_id):
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                f"üïê –û—Å—Ç–∞–ª–æ—Å—å –≤ –º–∏–Ω—É—Ç–µ: {remaining_minute}\n"
                f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_day}"
            )
            return
            
        self.add_request(user_id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.needs_current_data(user_message):
                response = await self.get_current_data(user_message)
            else:
                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini
                user_sessions[user_id].append({"role": "user", "content": user_message})
                messages = list(user_sessions[user_id])
                response = await self.call_gemini_api(messages)
                
                if response:
                    user_sessions[user_id].append({"role": "assistant", "content": response})
                else:
                    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self.safe_send_message(update, response)
            
        except Exception as e:
            logger.error(f"Error in handle_message: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    def needs_current_data(self, query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω—ã –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        keywords = [
            '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '–∞–∫—Ç—É–∞–ª—å–Ω', '—Å–≤–µ–∂', '–ø–æ—Å–ª–µ–¥–Ω',
            '–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–æ–≥–æ–¥–∞', '—Ç–µ–∫—É—â', '–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫',
            '—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '–≤–æ–∑—Ä–∞—Å—Ç', '–ª–µ—Ç', '–≥–æ–¥—ã', '–≥–æ–¥–∞'
        ]
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in keywords)

    async def get_current_data(self, query: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            if any(word in query.lower() for word in ['–Ω–æ–≤–æ—Å—Ç–∏', '–Ω–æ–≤–æ—Å—Ç—å', '–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫']):
                return await self.search_news(query)
            elif any(word in query.lower() for word in ['–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                return await self.search_currency_rates(query)
            elif any(word in query.lower() for word in ['–ø–æ–≥–æ–¥–∞']):
                return await self.search_weather_data(query)
            elif any(word in query.lower() for word in ['—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç', '–≤–æ–∑—Ä–∞—Å—Ç', '–ª–µ—Ç']):
                return await self.handle_age_query(query)
            else:
                # –û–±—â–∏–π –ø–æ–∏—Å–∫
                return await self.search_duckduckgo(query)
                
        except Exception as e:
            logger.error(f"Error getting current data: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."

    async def search_news(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            if self.news_client:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                numbers = re.findall(r'\d+', query)
                count = int(numbers[0]) if numbers else 10
                count = min(count, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 –Ω–æ–≤–æ—Å—Ç–µ–π
                
                articles = self.news_client.get_everything(
                    q='—Ä–æ—Å—Å–∏—è OR –ø–æ–ª–∏—Ç–∏–∫–∞ OR –ø—É—Ç–∏–Ω OR –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                    language='ru',
                    sort_by='publishedAt',
                    page_size=count
                )
                
                if articles['articles']:
                    news_list = []
                    for i, article in enumerate(articles['articles'][:count], 1):
                        title = article['title']
                        description = article.get('description', '')
                        url = article['url']
                        
                        news_item = f"{i}. {title}"
                        if description:
                            news_item += f"\n{description[:100]}..."
                        news_item += f"\nüîó {url}\n"
                        
                        news_list.append(news_item)
                    
                    return f"üì∞ –ü–û–°–õ–ï–î–ù–ò–ï –ù–û–í–û–°–¢–ò ({count} —à—Ç.):\n\n" + "\n".join(news_list)
            
            # Fallback –∫ –ø–æ–∏—Å–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            return await self.search_duckduckgo(query)
            
        except Exception as e:
            logger.error(f"News search error: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏."

    async def search_duckduckgo(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –≤ DuckDuckGo"""
        try:
            from urllib.parse import quote
            search_query = quote(query)
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://html.duckduckgo.com/html/?q={search_query}",
                    headers={'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'},
                    timeout=15
                ) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        results = []
                        for result in soup.find_all('div', {'class': 'result__body'})[:5]:
                            title_elem = result.find('a', {'class': 'result__a'})
                            snippet_elem = result.find('a', {'class': 'result__snippet'})
                            
                            if title_elem and snippet_elem:
                                title = title_elem.get_text().strip()
                                snippet = snippet_elem.get_text().strip()
                                url = title_elem.get('href', '')
                                
                                results.append(f"‚Ä¢ {title}\n{snippet}\nüîó {url}\n")
                        
                        if results:
                            return f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:\n\n" + "\n".join(results)
                        
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            
        except Exception as e:
            logger.error(f"DuckDuckGo search error: {e}")
            return "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞."

    async def search_currency_rates(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    "https://www.cbr-xml-daily.ru/daily_json.js",
                    timeout=10
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        usd = data['Valute']['USD']['Value']
                        eur = data['Valute']['EUR']['Value']
                        
                        return f"üí∞ –ö–£–†–°–´ –í–ê–õ–Æ–¢ (–¶–ë –†–§):\n\nüíµ USD: {usd:.2f} ‚ÇΩ\nüí∂ EUR: {eur:.2f} ‚ÇΩ"
                        
        except Exception as e:
            logger.error(f"Currency search error: {e}")
            
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç."

    async def search_weather_data(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã"""
        return await self.search_duckduckgo(f"–ø–æ–≥–æ–¥–∞ {query}")

    async def handle_age_query(self, query: str) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π"""
        try:
            current_date = datetime.now().strftime("%d.%m.%Y")
            current_year = datetime.now().year
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
            age_prompt = f"""–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø: –°–µ–≥–æ–¥–Ω—è {current_date} ({current_year} –≥–æ–¥).
            
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {query}

–ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ–∫—É—â–∏–π {current_year} –≥–æ–¥. 
–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ä–æ–¥–∏–ª—Å—è –≤ 1971 –≥–æ–¥—É, —Ç–æ –≤ {current_year} –≥–æ–¥—É –µ–º—É {current_year - 1971} –ª–µ—Ç.

–û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ, —É–∫–∞–∑—ã–≤–∞—è —Ç–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ {current_year} –≥–æ–¥."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
            messages = [{"role": "user", "content": age_prompt}]
            response = await self.call_gemini_api(messages)
            
            if response:
                return response
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç."
                
        except Exception as e:
            logger.error(f"Age query error: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ."

    async def safe_send_message(self, update: Update, response: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if len(response) > 4096:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for i in range(0, len(response), 4096):
                    await update.message.reply_text(response[i:i+4096])
            else:
                await update.message.reply_text(response)
                
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        user_id = update.message.from_user.id
        
        if not self.can_make_request(user_id):
            remaining_minute, remaining_day = self.get_remaining_requests(user_id)
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                f"üïê –û—Å—Ç–∞–ª–æ—Å—å –≤ –º–∏–Ω—É—Ç–µ: {remaining_minute}\n"
                f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_day}"
            )
            return
            
        self.add_request(user_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with aiohttp.ClientSession() as session:
                async with session.get(file.file_path) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        
                        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                        image_base64 = base64.b64encode(image_data).decode('utf-8')
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
                        headers = {'Content-Type': 'application/json'}
                        data = {
                            "contents": [
                                {
                                    "parts": [
                                        {"text": "–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ."},
                                        {
                                            "inline_data": {
                                                "mime_type": "image/jpeg",
                                                "data": image_base64
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                        
                        async with session.post(
                            f"{GEMINI_API_URL}?key={AI_API_KEY}",
                            headers=headers,
                            json=data,
                            timeout=30
                        ) as api_response:
                            if api_response.status == 200:
                                result = await api_response.json()
                                if 'candidates' in result and len(result['candidates']) > 0:
                                    response = result['candidates'][0]['content']['parts'][0]['text']
                                    await self.safe_send_message(update, response)
                                else:
                                    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                            else:
                                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                    else:
                        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                        
        except Exception as e:
            logger.error(f"Error processing photo: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception: {context.error}")
    if update and hasattr(update, 'message') and update.message:
        try:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

# HTTP —Å–µ—Ä–≤–µ—Ä –∏ webhook
async def health_check(request):
    """Health check endpoint"""
    return web.Response(text="Bot is running! Status: Active")

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    try:
        logger.info(f"Webhook received: {request.method} {request.path}")
        data = await request.json()
        logger.info(f"Webhook data keys: {list(data.keys())}")
        
        if not telegram_app:
            logger.error("telegram_app is None!")
            return web.Response(status=500, text="Bot not initialized")
            
        update = Update.de_json(data, telegram_app.bot)
        logger.info(f"Update processed: {update.update_id if update else 'None'}")
        
        await telegram_app.process_update(update)
        return web.Response(status=200, text="OK")
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return web.Response(status=500, text=f"Error: {str(e)}")

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–± —Å–µ—Ä–≤–µ—Ä–∞"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    app.router.add_post('/webhook', webhook_handler)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    logger.info(f"Web server started on port {PORT}")
    logger.info(f"Routes: {[route.resource.canonical for route in app.router.routes()]}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global telegram_app
    
    logger.info("Starting Gemini Telegram Bot...")
    logger.info(f"TELEGRAM_TOKEN: {'‚úì' if TELEGRAM_TOKEN else '‚úó'}")
    logger.info(f"AI_API_KEY: {'‚úì' if AI_API_KEY else '‚úó'}")
    logger.info(f"NEWS_API_KEY: {'‚úì' if NEWS_API_KEY else '‚úó'}")
    logger.info(f"PORT: {PORT}")
    logger.info(f"RENDER environment: {'‚úì' if os.environ.get('RENDER') else '‚úó'}")
    
    if not TELEGRAM_TOKEN or not AI_API_KEY:
        logger.error("Missing required environment variables")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
    bot = GeminiBot()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    telegram_app.add_handler(CommandHandler("start", bot.start_command))
    telegram_app.add_handler(CommandHandler("help", bot.help_command))
    telegram_app.add_handler(CommandHandler("clear", bot.clear_command))
    telegram_app.add_handler(CommandHandler("limits", bot.limits_command))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    telegram_app.add_handler(MessageHandler(filters.PHOTO, bot.handle_photo))
    telegram_app.add_error_handler(error_handler)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    is_production = os.environ.get('RENDER') is not None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await telegram_app.initialize()
    await telegram_app.start()
    
    # –û—á–∏—Å—Ç–∫–∞ webhook
    try:
        await telegram_app.bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"Error clearing webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–± —Å–µ—Ä–≤–µ—Ä–∞
    await start_web_server()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if is_production:
        # Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        webhook_url = "https://google-gemini-bot.onrender.com/webhook"
        logger.info(f"Setting webhook to {webhook_url}")
        
        try:
            await telegram_app.bot.set_webhook(url=webhook_url)
            logger.info("Webhook set successfully")
            
        except Exception as e:
            logger.error(f"Webhook error: {e}")
            # Fallback –∫ –ø–æ–ª–ª–∏–Ω–≥—É
            await telegram_app.updater.start_polling(drop_pending_updates=True)
            logger.info("Fallback to polling")
    else:
        # –ü–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("Starting polling mode")
        await telegram_app.updater.start_polling(drop_pending_updates=True)
        logger.info("Polling started")
    
    # –û–∂–∏–¥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    await asyncio.Event().wait()

if __name__ == '__main__':
    asyncio.run(main()) 